@model ExpertransDaoTao.ViewModel.QuestionViewModel

@{
    Layout = "_LayoutAdmin";
    ViewData["Title"] = "Câu Hỏi";
    var questions = Model.Questions.Take(15);
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">

                <h1>Câu Hỏi </h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/admin">Trang Chủ</a></li>
                    <li class="breadcrumb-item active">Câu hỏi</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<!-- Main content -->
<section class="content">

    <div class="row mb-4">
        <div class="col-12">
            <button class="btn btn-outline-primary btn-block" id="openCreateQuestionContainerBtn">Thêm Câu Hỏi Mới...</button>
        </div>
    </div>
    <div class="row mb-4 d-none" id="selectTypeToCreateQuestionContainer">
        <div class="col-12 mb-2 row d-flex justify-content-center align-items-center">
            <div class="col-3">
                <button style="min-height: 180px" type="button" class="btn btn-primary btn-block select-type-question-btn d-flex justify-content-center align-items-center"><div class="col-6 text-left font-weight-bold">Câu hỏi có một hoặc nhiều câu trả lời</div><div class="col-3"><i class="far fa-check-square fa-2x"></i></div><div class="col"><i class="fas fa-chevron-right fa-2x"></i></div></button>
            </div>
            <div class="col-3">
                <button style="min-height: 180px" type="button" class="btn btn-primary btn-block select-type-question-btn d-flex justify-content-center align-items-center"><div class="col-6 text-left font-weight-bold">Câu hỏi nối</div><div class="col-3"><i class="fas fa-random fa-2x"></i></div><div class="col"><i class="fas fa-chevron-right fa-2x"></i></div></button>
            </div>
            <div class="col-3">
                <button style="min-height: 180px" type="button" class="btn btn-primary btn-block select-type-question-btn d-flex justify-content-center align-items-center"><div class="col-6 text-left font-weight-bold">Câu hỏi điền từ</div><div class="col-3"><i class="fas fa-ellipsis-h fa-2x"></i></div><div class="col"><i class="fas fa-chevron-right fa-2x"></i></div></button>
            </div>
        </div>
        <div class="col-12 mb-2 row d-flex justify-content-center align-items-center">
            <div class="col-3">
                <button style="min-height: 180px" type="button" class="btn btn-primary btn-block select-type-question-btn d-flex justify-content-center align-items-center"><div class="col-6 text-left font-weight-bold">Câu hỏi viết lại câu</div><div class="col-3"><i class="far fa-comment-dots fa-2x"></i></div><div class="col"><i class="fas fa-chevron-right fa-2x"></i></div></button>
            </div>
            <div class="col-3">
                <button style="min-height: 180px" type="button" class="btn btn-primary btn-block select-type-question-btn d-flex justify-content-center align-items-center"><div class="col-6 text-left font-weight-bold">Câu hỏi tự luận</div><div class="col-3"><i class="fas fa-paragraph fa-2x"></i></div><div class="col"><i class="fas fa-chevron-right fa-2x"></i></div></button>
            </div>
            <div class="col-3">
                <button style="min-height: 180px" type="button" class="btn btn-primary btn-block select-type-question-btn d-flex justify-content-center align-items-center"><div class="col-6 text-left font-weight-bold">Câu hỏi đúng hoặc sai</div><div class="col-3"><i class="fas fa-check-circle fa-2x"></i></div><div class="col"><i class="fas fa-chevron-right fa-2x"></i></div></button>
            </div>
        </div>

        <div class="col-12 mb-4 d-flex justify-content-end">
            <button class="btn btn-outline-secondary btn-block col-3" id="closeSelectTypeToCreateQuestionContainerBtn">Hủy</button>
        </div>
    </div>
    <div class="row mb-4 d-none" id="createQuestionContainer">
        <div class="row col-5">
            <div class="col-12">
                <div class="progress d-none mb-4" id="progressCreateQuestionTextEdit">
                </div>
                <div id="summernoteCreateQuestionTextEdit"></div>
            </div>

        </div>

        <div class="col-7">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Câu trả lời</h3>
                </div>
                <!-- /.card-header -->
                <div class="card-body table-responsive p-0">
                    <table class="table table-head-fixed" id="answerToCreateQuestionTable">
                        <thead>
                            <tr>
                                <th class="text-success" style="width: 14%"></th>
                                <th style="min-width:35%">Nội Dung</th>
                                <th>File Đính Kèm (video, âm thanh, hình ảnh)</th>
                                <th style="width:8%">
                                    <button class="btn btn-success col-12 create-answer-btn" id="addAnswerToCreateQuestion">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </th>
                            </tr>
                        </thead>
                        <tbody id="answerToCreateQuestionTableBody">
                        </tbody>
                    </table>
                </div>
                <!-- /.card-body -->
            </div>
        </div>
        <div class="form-group col-12 d-flex flex-row">
            <label class="col-1">Các Thẻ</label>
            <div class="col-11">
                <select id="tagsCreateQuestion" multiple="multiple" class="col-12"></select>
                <small class="text-danger">*Gợi ý: Bạn có thể thêm thẻ mới bằng cách nhập tên vào ô phía trên sau đó nhấn "Enter"</small>
            </div>
        </div>
        <div class="col-12 mb-4 d-flex flex-row">
            <div class="col-9 text-center"><button class="btn btn-success btn-block" id="createQuestionBtn">Thêm Câu Hỏi Này</button></div>
            <div class="col-3 text-center"><button class="btn btn-outline-secondary btn-block" id="closeCreateQuestionContainerBtn">Hủy</button></div>
        </div>
    </div>


    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Danh sách câu hỏi</h3>

            <div class="card-tools">
                <div class="input-group input-group-sm" style="width: 250px;">
                    <input type="text" id="searchQuestionInput" name="table_search" class="form-control float-right" placeholder="Tìm kiếm nội dung/thẻ">

                    <div class="input-group-append">
                        <button type="submit" class="btn btn-default" disabled><i class="fas fa-search"></i></button>
                    </div>
                </div>
            </div>
        </div>

        <!-- /.card-header -->
        <div class="card-body table-responsive p-0">
            <table class="table table-head-fixed">
                <thead>
                    <tr>
                        <th width="6%">Id</th>
                        <th width="35%">Nội Dung</th>
                        <th>Loại Câu Hỏi</th>
                        <th width="10%">Thẻ</th>
                        <th style="width:12%"></th>
                        <th style="width:12%"></th>
                    </tr>
                </thead>
                <tbody id="quesTableBody">
                    @foreach (Question ques in questions)
                    {
                        string displayContent = ques.Content;
                        if (!string.IsNullOrEmpty(ques.DocIdsContent))
                        {
                            foreach (string s in ques.DocIdsContent.Split(",").ToList())
                            {
                                displayContent = System.Text.RegularExpressions.Regex.Replace(displayContent, @"<video[^>]*>(.*?)video>", "[video]");
                                displayContent = System.Text.RegularExpressions.Regex.Replace(displayContent, @"<img[^>]*>", "[hình ảnh]");
                                displayContent = System.Text.RegularExpressions.Regex.Replace(displayContent, @"<audio[^>]*>(.*?)audio>", "[âm thanh]");
                                displayContent = System.Text.RegularExpressions.Regex.Replace(displayContent, @"<a[^>]*>(.*?)a>", "[tệp tin]");
                                displayContent = System.Text.RegularExpressions.Regex.Replace(displayContent, @"\[(\S+)\]", "...............");
                            }
                        }

                        <tr class="question-record" id="question_@ques.QuestionId">
                            <td>@ques.QuestionId</td>
                            <td class="question-record-content" id="oldQuestionContent_@ques.QuestionId">@Html.Raw(System.Net.WebUtility.HtmlDecode(displayContent))</td>
                            <td>
                                @if (ques.Type == "1")
                                {@("Câu hỏi có một hoặc nhiều câu trả lời") }
                                else if (ques.Type == "2")
                                { @("Câu hỏi nối") }
                                else if (ques.Type == "3")
                                {@("Câu hỏi điền từ")}
                                else if (ques.Type == "4")
                                {@("Câu hỏi viết lại câu")}
                                else if (ques.Type == "5")
                                {@("Câu hỏi tự luận")}
                                else if (ques.Type == "6")
                                {@("Câu hỏi đúng hoặc sai")}
                            </td>
                            <td class="question-record-tag">
                                <p>
                                    @if (ques.Tag != null)
                                    {@ques.Tag}
                                </p>
                            </td>
                            <td><button class="btn btn-primary btn-block edit-question-btn" data-toggle="modal" data-target="#updateModal">Sửa</button></td>
                            <td><button class="btn btn-danger btn-block delete-question-btn" data-toggle="modal" data-target="#deleteModal">Xóa</button></td>
                        </tr>
                    }

                </tbody>
            </table>

        </div>
        @if (Model.Questions.Count() < 15)
        {
            <div class="col-12 text-center p-3 border border-top-3 border-right-0 border-left-0 border-bottom-0 font-weight-bold">Đã hết câu hỏi...</div>
        }
        <!-- /.card-body -->
    </div>

    <div class="modal fade" id="updateModal" tabindex="-1" role="dialog" aria-labelledby="updateModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document" style="min-width: 75%">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Cập nhật thông tin câu hỏi</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row mb-4" id="updateQuestionContainer">
                        <div class="col-5 row">
                            <div class="col-12">
                                <div class="progress d-none mb-4" id="progressUpdateQuestionTextEdit">
                                </div>
                                <div id="summernoteUpdateQuestionTextEdit"></div>
                            </div>

                        </div>

                        <div class="col-7">
                            <div class="card">
                                <div class="card-header">
                                    <h3 class="card-title">Câu trả lời</h3>
                                </div>
                                <!-- /.card-header -->
                                <div class="card-body table-responsive p-0" style="max-height: 50vh;">
                                    <table class="table table-head-fixed" id="answerToUpdateQuestionTable">
                                        <thead>
                                            <tr>
                                                <th class="text-success" style="width: 14%">Câu Đúng&nbsp;<i class="fas fa-check"></i></th>
                                                <th style="width:35%">Nội Dung</th>
                                                <th>File Đính Kèm (video, âm thanh, hình ảnh)</th>
                                                <th style="width:8%">
                                                    <button class="btn btn-success col-12 create-answer-btn" id="addAnswerToUpdateQuestion">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="answerToUpdateQuestionTableBody">
                                        </tbody>
                                    </table>
                                </div>
                                <!-- /.card-body -->
                            </div>
                        </div>
                        <div class="form-group col-12 d-flex flex-row">
                            <label class="col-1">Các Thẻ</label>
                            <div class="col-11">
                                <select id="tagsUpdateQuestion" multiple="multiple" class="col-12"></select>
                                <small class="text-danger">*Gợi ý: Bạn có thể thêm thẻ mới bằng cách nhập tên vào ô phía trên sau đó nhấn "Enter"</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="updateQuestionBtn">Cập nhật</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" id="closeUpdateQuestionContainerBtn">Hủy</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Xác nhận xóa câu hỏi này ?</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <input type="text" id="questionIdToDelete" class="d-none">
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="deleteQuestionBtn">Xác nhận</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
                </div>

            </div>
        </div>
    </div>
</section>
@section Scripts {
    <script>
        //Dữ liệu để tạo câu hỏi mới
        let createQuestionData = { Answer: [], DocIdsContent: "", TrueAnswers: "", Type: "", Content: "", Tag: "" }
        //Danh sách câu hỏi
        let listQuestion = [];
        //Dữ liệu để cập nhật câu hỏi
        let updateQuestionData = { Answer: [], DocIdsContent: "", TrueAnswers: "", Type: "", Content: "", Tag: "" };
        //Lấy dữ liệu câu hỏi
        $.ajax({
            url: "/Admin/GetQuestion",
            type: "GET",
            data: { Key: document.getElementById("searchQuestionInput").value, NumberRecord: 15 },
            dataType: "json",
            success: function (data) {
                const dataQuestions = JSON.parse(data);
                listQuestion = dataQuestions.questions;
                console.log(listQuestion);
            },
            error: function (errMsg) {
                toastr.error("Lỗi lấy dữ liệu");
            }
        });
        document.querySelectorAll(".question-record-content").forEach(elm => {
            const pTagToDisplay = elm.firstChild;
            elm.innerHTML = "";
            elm.appendChild(pTagToDisplay);
        })

        const getQuestion = (key, numberRecord) => {
            const quesTableBody = document.getElementById("quesTableBody");
            const node = quesTableBody.parentNode.parentNode.parentNode;
            let loadingElm = document.createElement("div");
            loadingElm.className = "d-flex justify-content-center p-3 border border-top-3 border-right-0 border-left-0 border-bottom-0";
            loadingElm.innerHTML = `<div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>`;
            console.log(node.children.length === 3);
            while (node.children.length > 2) {
                node.removeChild(node.lastChild);
            }
            node.appendChild(loadingElm);
            $.ajax({
                url: "/Admin/GetQuestion",
                type: "GET",
                data: { Key: key, NumberRecord: numberRecord !== null ? numberRecord : 15 },
                dataType: "json",
                success: function (data) {
                    quesTableBody.innerHTML = ``;
                    const dataQuestions = JSON.parse(data);
                    let more = dataQuestions.more;
                    console.log(dataQuestions);
                    listQuestion = dataQuestions.questions
                    listQuestion.forEach(ques => {
                        const trElm = document.createElement("tr");
                        trElm.setAttribute("id", `question_${ques.QuestionId}`)
                        trElm.classList.add("question-record");
                        let displayContent = ques.Content.repeat(1);
                        if (ques.DocIdsContent !== undefined && ques.DocIdsContent !== null) {
                            let docIdsContent = ques.DocIdsContent.repeat(1);
                            docIdsContent.split(",").forEach(docId => {
                                displayContent = displayContent.replace(new RegExp(`<video[^>]*>(.*?)video>`), "[video]");
                                displayContent = displayContent.replace(new RegExp(`<img[^>]*>`), "[hình ảnh]");
                                displayContent = displayContent.replace(new RegExp(`<audio[^>]*>(.*?)audio>`), "[âm thanh]");
                                displayContent = displayContent.replace(new RegExp(`<a[^>]*>(.*?)a>`), "[tệp tin]");

                            });
                        }
                        displayContent = displayContent.replace(/\[(\S+)\]/g, "...............");
                        console.log(displayContent);
                        let quesType = "";
                        switch (ques.Type) {
                            case "1":
                                quesType = "Câu hỏi có một hoặc nhiều câu trả lời đúng"
                                break;
                            case "2":
                                quesType = "Câu hỏi nối"
                                break;
                            case "3":
                                quesType = "Câu hỏi điền từ"
                                break;
                            case "4":
                                quesType = "Câu hỏi viết lại câu"
                                break;
                            case "5":
                                quesType = "Câu hỏi tự luận"
                                break;
                            case "6":
                                quesType = "Câu hỏi đúng hoặc sai"
                                break;

                        }
                        trElm.innerHTML = `<td>${ques.QuestionId}</td>
                                                                                                                                                                                                                                                                                <td class="question-record-content" id="oldQuestionContent_${ques.QuestionId}">${displayContent}</td>
                                                                                                                                                                                                                                                                                <td>${quesType}</td>

<td class="question-record-tag"><p>${ques.Tag !== null ? ques.Tag : ""}</p></td>
                                                                                                                                                                                                                                                                                <td><button class="btn btn-primary btn-block edit-question-btn" data-toggle="modal" data-target="#updateModal">Sửa</button></td>
                                                                                                                                                                                                                                                                                <td><button class="btn btn-danger btn-block delete-question-btn" data-toggle="modal" data-target="#deleteModal">Xóa</button></td>`;
                        quesTableBody.appendChild(trElm);
                    })
                    document.querySelectorAll(".question-record-content").forEach(elm => {
                        const pTagToDisplay = elm.firstChild;
                        elm.innerHTML = "";
                        elm.appendChild(pTagToDisplay);
                    })
                    if (more === true) {
                        while (node.children.length > 2) {
                            node.removeChild(node.lastChild);
                        }
                    }
                    if (more === false) {
                        let endedElm = document.createElement("div");
                        endedElm.className = "col-12 text-center p-3 border border-top-3 border-right-0 border-left-0 border-bottom-0 font-weight-bold";
                        endedElm.innerHTML = `Đã hết câu hỏi...`;
                        if (node.children.length === 3) {
                            node.removeChild(node.lastChild);
                            node.appendChild(endedElm);
                        }
                    }
                    runAfterRender();
                },
                error: function (errMsg) {
                    if (node.children.length === 3) {
                        node.removeChild(node.lastChild);
                    }
                    toastr.error("Lỗi lấy dữ liệu");
                }
            });
        }
        const runAfterRender = () => {

            //Click Sửa
            document.querySelectorAll(".edit-question-btn").forEach(btn => {
                btn.onclick = (e) => {
                    e.preventDefault();
                    //Lấy dữ liệu cũ của câu hỏi cần update
                    const quesId = btn.parentNode.parentNode.id.split("_")[1];
                    const answerToUpdateQuestionTableBody = document.getElementById("answerToUpdateQuestionTableBody");
                    console.log(quesId);
                    //Copy listQuestion
                    let copy = new Array(...listQuestion);
                    updateQuestionData = copy.filter(ques => String(ques.QuestionId) === String(quesId))[0];
                    console.log(updateQuestionData)
                    //Đặt lại những các mục cần khi khởi tạo
                    answerToUpdateQuestionTableBody.innerHTML = ``;
                    //Khởi tạo text editor
                    const typeQuestion = updateQuestionData.Type;
                    const elmToDisplay = document.getElementById("updateQuestionContainer").children;
                    const elmToRemove = document.querySelector("#answerToUpdateQuestionTable thead tr").children;
                    //load chọn tag
                    $("#tagsUpdateQuestion").select2({
                        tags: true,
                        tokenSeparators: [','],
                        createTag: function (params) {
                            const term = $.trim(params.term);
                            if (term === '') {
                                return null;
                            }
                            return {
                                id: term,
                                text: term,
                                newTag: true // add additional parameters
                            }
                        }
                    });
                    $("#tagsUpdateQuestion").html("");
                    if (updateQuestionData.Tag !== null) {
                        updateQuestionData.Tag.split(",").forEach(tag => {
                            console.log(tag);
                            const tagSelected = document.createElement("option");
                            tagSelected.setAttribute("selected", "selected");
                            tagSelected.innerText = tag;
                            $("#tagsUpdateQuestion").append(tagSelected);
                        })
                    }
                    //Tùy chỉnh nội dung cột phù hợp với câu hỏi
                    if (typeQuestion === "1") {
                        elmToDisplay.item(0).className = "col-5";
                        elmToDisplay.item(1).className = "col-7";

                        elmToRemove.item(3).className = "";
                        elmToRemove.item(2).className = "";
                        elmToRemove.item(1).className = "";
                        elmToRemove.item(2).innerHTML = `File Đính Kèm (video, âm thanh, hình ảnh)`;
                        elmToRemove.item(1).innerHTML = `Nội dung`;
                        elmToRemove.item(1).style.width = `35%`;
                        elmToRemove.item(0).innerHTML = `Câu Đúng&nbsp;<i class="fas fa-check"></i>`;
                        elmToRemove.item(0).style.width = `14%`;
                        //load summernote
                        $('#summernoteUpdateQuestionTextEdit').summernote({
                            minHeight: 300,
                            lineHeight: "0.6",
                            toolbar: [
                                ['style', ['fontname', 'fontsize']],
                                ['font', ['bold', 'italic', 'underline', 'clear']],
                                ['color', ['color']],
                                ['para', ['ul', 'ol', 'paragraph', "height"]],
                                ['table', ['table']],
                                ['insert', ["file"]],
                                ['view', ['fullscreen']]
                            ],
                            callbacks: {
                                onFileUpload: function (files) {
                                    console.log(files[0]);
                                    uploadDocToUpdateCallBack(files[0]);
                                },
                                onChange: function (contents, $editable) {
                                    updateQuestionData["Content"] = contents;
                                    console.log(updateQuestionData);
                                }
                            },
                        });
                    } else if (typeQuestion === "2") {
                        elmToDisplay.item(0).className = "col-5";
                        elmToDisplay.item(1).className = "col-7";

                        elmToRemove.item(3).className = "";
                        elmToRemove.item(2).className = "";
                        elmToRemove.item(1).className = "";
                        elmToRemove.item(2).innerHTML = `File Đính Kèm (video, âm thanh, hình ảnh)`;
                        elmToRemove.item(1).innerHTML = `Nội dung`;
                        elmToRemove.item(1).style.width = `35%`;
                        elmToRemove.item(0).innerHTML = ``;
                        elmToRemove.item(0).style.width = `14%`;

                        //load summernote
                        $('#summernoteUpdateQuestionTextEdit').summernote({
                            minHeight: 300,
                            lineHeight: "0.6",
                            toolbar: [
                                ['style', ['fontname', 'fontsize']],
                                ['font', ['bold', 'italic', 'underline', 'clear']],
                                ['color', ['color']],
                                ['para', ['ul', 'ol', 'paragraph', "height"]],
                                ['table', ['table']],
                                ['insert', ["file"]],
                                ['view', ['fullscreen']]
                            ],
                            callbacks: {
                                onFileUpload: function (files) {
                                    console.log(files[0]);
                                    uploadDocToUpdateCallBack(files[0]);
                                },
                                onChange: function (contents, $editable) {
                                    updateQuestionData["Content"] = contents;
                                    console.log(updateQuestionData);
                                }
                            },
                        });
                    } else if (typeQuestion === "3") {
                        elmToDisplay.item(0).className = "col-5";
                        elmToDisplay.item(1).className = "col-7";

                        elmToRemove.item(3).className = "";
                        elmToRemove.item(2).className = "";
                        elmToRemove.item(1).className = "";
                        elmToRemove.item(2).innerHTML = ``;
                        elmToRemove.item(1).innerHTML = `Cụm từ đúng`;
                        elmToRemove.item(1).style.width = ``;
                        elmToRemove.item(0).innerHTML = `Id`;
                        elmToRemove.item(0).style.width = `26%`;

                        //load summernote
                        $('#summernoteUpdateQuestionTextEdit').summernote({
                            minHeight: 300,
                            lineHeight: "0.6",
                            toolbar: [
                                ['style', ['fontname', 'fontsize']],
                                ['font', ['bold', 'italic', 'underline', 'clear']],
                                ['color', ['color']],
                                ['para', ['ul', 'ol', 'paragraph', "height"]],
                                ['table', ['table']],
                                ['insert', ["file"]],
                                ['view', ['fullscreen']]
                            ],
                            callbacks: {
                                onFileUpload: function (files) {
                                    console.log(files[0]);
                                    uploadDocToUpdateCallBack(files[0]);
                                },
                                onChange: function (contents, $editable) {
                                    updateQuestionData["Content"] = contents;
                                    updateQuestionData.Answer = updateQuestionData.Answer.filter(ans => contents.indexOf(`[${ans.AnswerId}]`) !== -1);
                                    document.querySelectorAll(".answer-to-update-question").forEach(ansElm => {
                                        const idAnswer = ansElm.id.split("_")[1];
                                        const resultFind = updateQuestionData.Answer.find(ans => String(idAnswer) === String(ans.AnswerId))
                                        console.log(resultFind)
                                        console.log(ansElm);
                                        if (resultFind === undefined) {
                                            const node = ansElm.parentNode;
                                            node.removeChild(ansElm);
                                        };
                                    })
                                    console.log(updateQuestionData);
                                }
                            },
                        });
                    }
                    else if (typeQuestion === "4") {
                        elmToDisplay.item(0).className = "col-12";
                        elmToDisplay.item(1).className = "d-none";
                        //load summernote
                        $('#summernoteUpdateQuestionTextEdit').summernote({
                            minHeight: 300,
                            lineHeight: "0.6",
                            toolbar: [
                                ['style', ['fontname', 'fontsize']],
                                ['font', ['bold', 'italic', 'underline', 'clear']],
                                ['color', ['color']],
                                ['para', ['ul', 'ol', 'paragraph', "height"]],
                                ['table', ['table']],
                                ['insert', ["file"]],
                                ['view', ['fullscreen']]
                            ],
                            callbacks: {
                                onFileUpload: function (files) {
                                    console.log(files[0]);
                                    uploadDocToUpdateCallBack(files[0]);
                                },
                                onChange: function (contents, $editable) {
                                    updateQuestionData["Content"] = contents;
                                    console.log(updateQuestionData);
                                }
                            },
                        });
                    } else if (typeQuestion === "5") {
                        elmToDisplay.item(0).className = "col-12";
                        elmToDisplay.item(1).className = "d-none";
                        //load summernote
                        $('#summernoteUpdateQuestionTextEdit').summernote({
                            minHeight: 300,
                            lineHeight: "0.6",
                            toolbar: [
                                ['style', ['fontname', 'fontsize']],
                                ['font', ['bold', 'italic', 'underline', 'clear']],
                                ['color', ['color']],
                                ['para', ['ul', 'ol', 'paragraph', "height"]],
                                ['table', ['table']],
                                ['insert', ["file"]],
                                ['view', ['fullscreen']]
                            ],
                            callbacks: {
                                onFileUpload: function (files) {
                                    console.log(files[0]);
                                    uploadDocToUpdateCallBack(files[0]);
                                },
                                onChange: function (contents, $editable) {
                                    updateQuestionData["Content"] = contents;
                                    console.log(updateQuestionData);
                                }
                            },
                        });
                    } else if (typeQuestion === "6") {
                        elmToDisplay.item(0).className = "col-10";
                        elmToDisplay.item(1).className = "col-2";

                        elmToRemove.item(3).className = "d-none";
                        elmToRemove.item(2).className = "d-none";
                        elmToRemove.item(1).className = "d-none";
                        elmToRemove.item(0).innerHTML = `Đáp án&nbsp;<i class="fas fa-check"></i>`;
                        elmToRemove.item(0).style.width = `100%`;
                        //load summernote
                        $('#summernoteUpdateQuestionTextEdit').summernote({
                            minHeight: 300,
                            lineHeight: "0.6",
                            toolbar: [
                                ['style', ['fontname', 'fontsize']],
                                ['font', ['bold', 'italic', 'underline', 'clear']],
                                ['color', ['color']],
                                ['para', ['ul', 'ol', 'paragraph', "height"]],
                                ['table', ['table']],
                                ['insert', ["file"]],
                                ['view', ['fullscreen']]
                            ],
                            callbacks: {
                                onFileUpload: function (files) {
                                    console.log(files[0]);
                                    uploadDocToUpdateCallBack(files[0]);
                                },
                                onChange: function (contents, $editable) {
                                    updateQuestionData["Content"] = contents;
                                    console.log(updateQuestionData);
                                }
                            },
                        });
                    }
                    //Thêm câu trả lời mới vào câu hỏi của giao diện cập nhật câu hỏi
                    const addAnswerToUpdateQuestionBtn = document.getElementById("addAnswerToUpdateQuestion");
                    addAnswerToUpdateQuestionBtn.onclick = (e) => {

                        if (updateQuestionData.Type === "1") {

                            let indexAnswerToUpdateQuestion = Math.random().toString(36).slice(2);
                            if (document.getElementById(`answerToUpdateQuestion_${indexAnswerToUpdateQuestion}`) !== undefined) {
                                indexAnswerToUpdateQuestion = Math.random().toString(36).slice(2);
                            }
                            const tr = document.createElement("tr");
                            tr.setAttribute("id", `answerToUpdateQuestion_${indexAnswerToUpdateQuestion}`);
                            tr.classList.add("answer-to-update-question");
                            tr.innerHTML = `<th class="text-center"><input class="answer-right-to-update-question" type="checkbox"></th>
<th><input class="answer-content-to-update-question col-12" type="text"></th>
<th><input class="answer-file-to-update-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
<div class="progress d-none mb-4" id="progressFileToUpdateAnswer_${indexAnswerToUpdateQuestion}">
</div></th>
<th>
<button class="btn btn-danger col-12 remove-answer-to-update-question">
<i class="fas fa-minus"></i>
</button>
</th>
`;
                            answerToUpdateQuestionTableBody.appendChild(tr);
                            updateQuestionData.Answer.push({ AnswerId: indexAnswerToUpdateQuestion, Content: "" })

                            console.log(updateQuestionData);
                            //Xóa câu trả lời
                            document.querySelectorAll(".remove-answer-to-update-question").forEach(elm => {
                                elm.addEventListener("click", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    //Cập nhật câu hỏi
                                    const newAnswers = updateQuestionData.Answer.filter(ans => String(ans.AnswerId) !== String(AnswerId));
                                    updateQuestionData.Answer = newAnswers;
                                    //Cập nhật câu trả lời đúng
                                    let newTrueAnswers = updateQuestionData.TrueAnswers.split(",");
                                    newTrueAnswers = newTrueAnswers.filter(ans => ans !== AnswerId);
                                    updateQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                    elm.parentNode.parentNode.parentNode.removeChild(elm.parentNode.parentNode);
                                    console.log(updateQuestionData);
                                });
                            });
                            //Sửa nội dung
                            document.querySelectorAll(".answer-content-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                    updateQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                    console.log(updateQuestionData);
                                });
                            });

                            //Thêm file đính kèm
                            document.querySelectorAll(".answer-file-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                    if (elm.files[0] !== undefined && (elm.files[0].type.indexOf("audio") !== -1 || elm.files[0].type.indexOf("image") !== -1 || elm.files[0].type.indexOf("video") !== -1)) {
                                        let fileData = new FormData();
                                        fileData.append(elm.files[0].name, elm.files[0]);
                                        $.ajax({
                                            type: "POST",
                                            url: "/Admin/UploadDoc?Filename=", //Your own back-end uploader
                                            contentType: false,
                                            processData: false,
                                            data: fileData,
                                            async: true,
                                            success: function (response) {
                                                const jsonResponse = JSON.parse(response);
                                                console.log(jsonResponse);
                                                updateQuestionData.Answer[indexAnswerInArray]["DocId"] = jsonResponse.DocId;
                                                updateQuestionData.Answer[indexAnswerInArray]["Type"] = elm.files[0].type;
                                                console.log(updateQuestionData);
                                                updateProgressById("progressFileAnswerToUpdate_" + AnswerId, 0);

                                                let elem;
                                                const node = elm.parentNode;

                                                if (elm.files[0].type.indexOf("image") !== -1) {
                                                    //Picture
                                                    elem = document.createElement("img");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.setAttribute("height", "auto");
                                                    elem.setAttribute("width", "auto");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");

                                                    if (elm.parentNode.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                } else if (elm.files[0].type.indexOf("audio") !== -1) {
                                                    //Audio
                                                    elem = document.createElement("audio");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("controls", "controls");
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");

                                                    if (elm.parentNode.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                } else if (elm.files[0].type.indexOf("video") !== -1) {
                                                    //Video
                                                    elem = document.createElement("video");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("controls", "controls");
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");

                                                    if (elm.parentNode.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                }
                                                else {
                                                    return
                                                }
                                                let removeBtnElm = document.createElement("button");
                                                removeBtnElm.classList.add("btn");
                                                removeBtnElm.classList.add("btn-danger");
                                                removeBtnElm.classList.add("col-12");
                                                removeBtnElm.classList.add("remove-document-from-answer-to-update-question");
                                                removeBtnElm.innerHTML = `<i class="fas fa-minus"></i>`;
                                                removeBtnElm.addEventListener("click", e => {
                                                    node.removeChild(node.lastChild);
                                                    node.removeChild(node.lastChild);
                                                    updateQuestionData.Answer[indexAnswerInArray]["DocId"] = undefined;
                                                    updateQuestionData.Answer[indexAnswerInArray]["Type"] = "text";
                                                    node.firstChild.value = "";
                                                })
                                                node.appendChild(removeBtnElm);

                                            },
                                            xhr: function () {
                                                let xhr = new window.XMLHttpRequest();
                                                xhr.upload.addEventListener("progress", function (evt) {
                                                    if (evt.lengthComputable) {
                                                        let percentComplete = Math.round((evt.loaded / evt.total) * 100);
                                                        if (percentComplete < 98) {
                                                            updateProgressById("progressFileAnswerToUpdate_" + AnswerId, percentComplete);
                                                        }
                                                    }
                                                }, false);
                                                return xhr;
                                            },
                                            error: () => {
                                                toastr.error("Lỗi tải lên file!");
                                            }
                                        });

                                    }
                                });
                            });
                            //Chọn câu đúng
                            document.querySelectorAll(".answer-right-to-update-question").forEach(elm => {
                                elm.addEventListener("change", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    if (e.target.checked) {
                                        let newTrueAnswers = updateQuestionData.TrueAnswers.split(",")
                                        newTrueAnswers = newTrueAnswers.filter(ansId => ansId !== AnswerId);
                                        newTrueAnswers.push(AnswerId);
                                        updateQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                    } else {
                                        let newTrueAnswers = updateQuestionData.TrueAnswers.split(",")
                                        newTrueAnswers = newTrueAnswers.filter(ansId => ansId !== AnswerId);
                                        updateQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                    }
                                    console.log(updateQuestionData);
                                });
                            });
                        } else if (updateQuestionData.Type === "2") {


                            let indexAnswerToUpdateQuestion = Math.random().toString(36).slice(2);
                            if (document.getElementById(`answerToUpdateQuestion_${indexAnswerToUpdateQuestion}`) !== undefined) {
                                indexAnswerToUpdateQuestion = Math.random().toString(36).slice(2);
                            }
                            const tr = document.createElement("tr");
                            tr.setAttribute("id", `answerToUpdateQuestion_${indexAnswerToUpdateQuestion}`);
                            tr.classList.add("answer-to-update-question");
                            tr.innerHTML = `<th class="text-center"><i class="fas fa-sort-down fa-2x"></i></th>
<th><input class="answer-content-to-update-question col-12" type="text"></th>
<th><input class="answer-file-to-update-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
<div class="progress d-none mb-4" id="progressFileToUpdateAnswer_${indexAnswerToUpdateQuestion}">
</div></th>
<th>
</th>
`;
                            answerToUpdateQuestionTableBody.appendChild(tr);
                            updateQuestionData.Answer.push({ AnswerId: indexAnswerToUpdateQuestion, Content: "" })
                            //Câu trả lời để nối
                            indexAnswerToUpdateQuestion = Math.random().toString(36).slice(2);
                            if (document.getElementById(`answerToUpdateQuestion_${indexAnswerToCreateQuestion}`) !== undefined) {
                                indexAnswerToUpdateQuestion = Math.random().toString(36).slice(2);
                            }
                            const trNext = document.createElement("tr");
                            trNext.setAttribute("id", `answerToUpdateQuestion_${indexAnswerToUpdateQuestion}`);
                            trNext.classList.add("answer-to-update-question");
                            trNext.innerHTML = `<th class="text-center"><i class="fas fa-sort-up fa-2x"></i></th>
<th><input class="answer-content-to-update-question col-12" type="text"></th>
<th><input class="answer-file-to-update-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
<div class="progress d-none mb-4" id="progressFileToUpdateAnswer_${indexAnswerToUpdateQuestion}">
</div></th>
<th>
<button class="btn btn-danger col-12 remove-answer-to-update-question">
<i class="fas fa-minus"></i>
</button>
</th>
`;
                            answerToUpdateQuestionTableBody.appendChild(trNext);
                            updateQuestionData.Answer.push({ AnswerId: indexAnswerToUpdateQuestion, Content: "" })

                            console.log(updateQuestionData);
                            //Xóa câu trả lời
                            document.querySelectorAll(".remove-answer-to-update-question").forEach(elm => {
                                elm.addEventListener("click", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    //Cập nhật trả lời
                                    let indexAnswer = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.find(ans => String(ans.AnswerId) === String(AnswerId)));
                                    console.log(indexAnswer);
                                    updateQuestionData.Answer.splice(indexAnswer, 1);
                                    updateQuestionData.Answer.splice(indexAnswer - 1, 1);


                                    const node = elm.parentNode.parentNode.parentNode;
                                    const children = node.children;
                                    node.removeChild(children[indexAnswer]);
                                    node.removeChild(children[indexAnswer - 1]);
                                    console.log(updateQuestionData);
                                });
                            });
                            //Sửa nội dung
                            document.querySelectorAll(".answer-content-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                    updateQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                    console.log(updateQuestionData);
                                });
                            });

                            //Thêm file đính kèm
                            document.querySelectorAll(".answer-file-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                    if (elm.files[0] !== undefined && (elm.files[0].type.indexOf("audio") !== -1 || elm.files[0].type.indexOf("image") !== -1 || elm.files[0].type.indexOf("video") !== -1)) {
                                        let fileData = new FormData();
                                        fileData.append(elm.files[0].name, elm.files[0]);
                                        $.ajax({
                                            type: "POST",
                                            url: "/Admin/UploadDoc?Filename=", //Your own back-end uploader
                                            contentType: false,
                                            processData: false,
                                            data: fileData,
                                            async: true,
                                            success: function (response) {
                                                const jsonResponse = JSON.parse(response);
                                                console.log(jsonResponse);
                                                updateQuestionData.Answer[indexAnswerInArray]["DocId"] = jsonResponse.DocId;
                                                updateQuestionData.Answer[indexAnswerInArray]["Type"] = elm.files[0].type;
                                                console.log(updateQuestionData);
                                                updateProgressById("progressFileToUpdateAnswer_" + AnswerId, 0);

                                                let elem;
                                                const node = elm.parentNode;

                                                if (elm.files[0].type.indexOf("image") !== -1) {
                                                    //Picture
                                                    elem = document.createElement("img");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.setAttribute("height", "auto");
                                                    elem.setAttribute("width", "auto");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");
                                                    if (elm.parentNode.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                } else if (elm.files[0].type.indexOf("audio") !== -1) {
                                                    //Audio
                                                    elem = document.createElement("audio");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("controls", "controls");
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");
                                                    if (elm.parentNode.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                } else if (elm.files[0].type.indexOf("video") !== -1) {
                                                    //Video
                                                    elem = document.createElement("video");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("controls", "controls");
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");
                                                    if (elm.parentNode.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                }
                                                else {
                                                    return
                                                }
                                                let removeBtnElm = document.createElement("button");
                                                removeBtnElm.classList.add("btn");
                                                removeBtnElm.classList.add("btn-danger");
                                                removeBtnElm.classList.add("col-12");
                                                removeBtnElm.classList.add("remove-document-from-answer-to-update-question");
                                                removeBtnElm.innerHTML = `<i class="fas fa-minus"></i>`;
                                                removeBtnElm.addEventListener("click", e => {
                                                    node.removeChild(node.lastChild);
                                                    node.removeChild(node.lastChild);
                                                    updateQuestionData.Answer[indexAnswerInArray]["DocId"] = undefined;
                                                    updateQuestionData.Answer[indexAnswerInArray]["Type"] = "text";
                                                    node.firstChild.value = "";
                                                })
                                                node.appendChild(removeBtnElm);

                                            },
                                            xhr: function () {
                                                let xhr = new window.XMLHttpRequest();
                                                xhr.upload.addEventListener("progress", function (evt) {
                                                    if (evt.lengthComputable) {
                                                        let percentComplete = Math.round((evt.loaded / evt.total) * 100);
                                                        if (percentComplete < 98) {
                                                            updateProgressById("progressFileToUpdateAnswer_" + AnswerId, percentComplete);
                                                        }
                                                    }
                                                }, false);
                                                return xhr;
                                            },
                                            error: () => {
                                                toastr.error("Lỗi tải lên file!");
                                            }
                                        });

                                    }
                                });
                            });

                        } else if (updateQuestionData.Type === "3") {

                            let indexAnswerToUpdateQuestion = Math.random().toString(36).slice(2);
                            if (document.getElementById(`answerToUpdateQuestion_${indexAnswerToUpdateQuestion}`) !== undefined) {
                                indexAnswerToUpdateQuestion = Math.random().toString(36).slice(2);
                            }
                            const tr = document.createElement("tr");
                            tr.setAttribute("id", `answerToUpdateQuestion_${indexAnswerToUpdateQuestion}`);
                            tr.classList.add("answer-to-update-question");
                            tr.innerHTML = `<th class="text-center">[${indexAnswerToUpdateQuestion}]</th>
<th><input class="answer-content-to-update-question col-12" type="text" ></th>
<th></th>
<th>
<button class="btn btn-danger col-12 remove-answer-to-update-question">
<i class="fas fa-minus"></i>
</button>
</th>
`;
                            answerToUpdateQuestionTableBody.appendChild(tr);
                            updateQuestionData.Answer.push({ AnswerId: indexAnswerToUpdateQuestion, Content: "" })
                            //Thêm đánh dấu vị trí của từ cần thêm
                            $('#summernoteUpdateQuestionTextEdit').summernote('insertText', `[${indexAnswerToUpdateQuestion}]`);
                            console.log(updateQuestionData);
                            //Xóa câu trả lời
                            document.querySelectorAll(".remove-answer-to-update-question").forEach(elm => {
                                elm.addEventListener("click", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);

                                    //Xóa dữ liệu câu trả lời
                                    let indexAnswer = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.find(ans => String(ans.AnswerId) === String(AnswerId)));
                                    console.log(indexAnswer);
                                    updateQuestionData.Answer.splice(indexAnswer, 1);
                                    //Xóa HTML
                                    const node = elm.parentNode.parentNode.parentNode;
                                    const children = node.children;
                                    node.removeChild(children[indexAnswer]);
                                    //Xóa trong texteditor
                                    const newContent = $('#summernoteUpdateQuestionTextEdit').summernote('code').replace(`[${AnswerId}]`, "")
                                    $('#summernoteUpdateQuestionTextEdit').summernote('code', newContent);
                                    console.log(updateQuestionData);
                                });
                            });
                            //Sửa nội dung
                            document.querySelectorAll(".answer-content-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                    updateQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                    console.log(updateQuestionData);
                                });
                            });
                        } else if (updateQuestionData.Type === "4") {

                        } else if (updateQuestionData.Type === "5") {

                        }

                    };
                    $('#summernoteUpdateQuestionTextEdit').summernote('code', updateQuestionData["Content"]);
                    let checkForLevel2 = 0;
                    updateQuestionData.Answer.forEach(ans => {
                        if (updateQuestionData.Type === "1") {

                            const tr = document.createElement("tr");
                            tr.setAttribute("id", `answerToUpdateQuestion_${ans.AnswerId}`);
                            tr.classList.add("answer-to-update-question");
                            tr.innerHTML = `<th class="text-center"><input class="answer-right-to-update-question" type="checkbox" ${updateQuestionData.TrueAnswers.split(",").indexOf(String(ans.AnswerId)) !== -1 ? "checked" : ""}></th>
                                                                                                                                                                                                                                                                                                <th><input class="answer-content-to-update-question col-12" type="text" value="${ans.Content ? ans.Content : ""}"></th>
                                                                                                                                                                                                                                                                                                <th><input class="answer-file-to-update-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
                                                                                                                                                                                                                                                                                                <div class="progress d-none mb-4" id="progressFileAnswerToUpdate_${ans.AnswerId}">
                                                                                                                                                                                                                                                                                                </div></th>
                                                                                                                                                                                                                                                                                                <th>
                                                                                                                                                                                                                                                                                                <button class="btn btn-danger col-12 remove-answer-to-update-question">
                                                                                                                                                                                                                                                                                                <i class="fas fa-minus"></i>
                                                                                                                                                                                                                                                                                                </button>
                                                                                                                                                                                                                                                                                                </th>
                                                                                                                                                                                                                                                                                                `;

                            answerToUpdateQuestionTableBody.appendChild(tr);
                            //Xóa câu trả lời
                            document.querySelectorAll(".remove-answer-to-update-question").forEach(elm => {
                                elm.addEventListener("click", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    //Cập nhật câu hỏi
                                    const newAnswers = updateQuestionData.Answer.filter(ans => String(ans.AnswerId) !== String(AnswerId));
                                    updateQuestionData.Answer = newAnswers;
                                    //Cập nhật câu trả lời đúng
                                    let newTrueAnswers = updateQuestionData.TrueAnswers.split(",");
                                    newTrueAnswers = newTrueAnswers.filter(ans => ans !== AnswerId);
                                    updateQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                    elm.parentNode.parentNode.parentNode.removeChild(elm.parentNode.parentNode);
                                    console.log(updateQuestionData);
                                });
                            });
                            //Sửa nội dung
                            document.querySelectorAll(".answer-content-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => String(ans.AnswerId) === String(AnswerId))[0]);
                                    console.log(indexAnswerInArray);
                                    updateQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                    console.log(updateQuestionData);
                                });
                            });
                            //Thêm file đính kèm
                            document.querySelectorAll(".answer-file-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => String(ans.AnswerId) === String(AnswerId))[0]);
                                    if (elm.files[0] !== undefined && (elm.files[0].type.indexOf("audio") !== -1 || elm.files[0].type.indexOf("image") !== -1 || elm.files[0].type.indexOf("video") !== -1)) {
                                        let fileData = new FormData();
                                        fileData.append(elm.files[0].name, elm.files[0]);
                                        $.ajax({
                                            type: "POST",
                                            url: "/Admin/UploadDoc?Filename=", //Your own back-end uploader
                                            contentType: false,
                                            processData: false,
                                            data: fileData,
                                            async: true,
                                            success: function (response) {
                                                const jsonResponse = JSON.parse(response);
                                                console.log(jsonResponse);
                                                updateQuestionData.Answer[indexAnswerInArray]["DocId"] = jsonResponse.DocId;
                                                updateQuestionData.Answer[indexAnswerInArray]["Type"] = elm.files[0].type;
                                                console.log(updateQuestionData);
                                                updateProgressById("progressFileAnswerToUpdate_" + AnswerId, 0);

                                                let elem;
                                                const node = elm.parentNode
                                                if (elm.files[0].type.indexOf("image") !== -1) {
                                                    //Picture
                                                    elem = document.createElement("img");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.setAttribute("height", "auto");
                                                    elem.setAttribute("width", "auto");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");
                                                    if (node.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                } else if (elm.files[0].type.indexOf("audio") !== -1) {
                                                    //Audio
                                                    elem = document.createElement("audio");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("controls", "controls");
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");

                                                    if (node.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                } else if (elm.files[0].type.indexOf("video") !== -1) {
                                                    //Video
                                                    elem = document.createElement("video");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("controls", "controls");
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");

                                                    if (node.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                }
                                                if (ans.Type.indexOf("video") !== -1 || ans.Type.indexOf("image") !== -1 || ans.Type.indexOf("audio") !== -1) {
                                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(ans);
                                                    let removeBtnElm = document.createElement("button");
                                                    removeBtnElm.classList.add("btn");
                                                    removeBtnElm.classList.add("btn-danger");
                                                    removeBtnElm.classList.add("col-12");
                                                    removeBtnElm.classList.add("remove-document-from-answer-to-update-question");
                                                    removeBtnElm.innerHTML = `<i class="fas fa-minus"></i>`;
                                                    removeBtnElm.addEventListener("click", e => {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                        updateQuestionData.Answer[indexAnswerInArray]["DocId"] = undefined;
                                                        updateQuestionData.Answer[indexAnswerInArray]["Type"] = "text";
                                                        node.firstChild.value = "";
                                                    })
                                                    node.appendChild(removeBtnElm);
                                                }
                                            },
                                            xhr: function () {
                                                let xhr = new window.XMLHttpRequest();
                                                xhr.upload.addEventListener("progress", function (evt) {
                                                    if (evt.lengthComputable) {
                                                        let percentComplete = Math.round((evt.loaded / evt.total) * 100);
                                                        if (percentComplete < 98) {
                                                            updateProgressById("progressFileAnswerToUpdate_" + AnswerId, percentComplete);
                                                        }
                                                    }
                                                }, false);
                                                return xhr;
                                            },
                                            error: () => {
                                                toastr.error("Lỗi tải lên file!");
                                            }
                                        });

                                    }
                                });
                            });
                            //Chọn câu đúng
                            document.querySelectorAll(".answer-right-to-update-question").forEach(elm => {
                                elm.addEventListener("change", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    if (e.target.checked) {
                                        let newTrueAnswers = updateQuestionData.TrueAnswers.split(",")
                                        newTrueAnswers = newTrueAnswers.filter(ansId => ansId !== AnswerId);
                                        newTrueAnswers.push(AnswerId);
                                        updateQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                    } else {
                                        let newTrueAnswers = updateQuestionData.TrueAnswers.split(",")
                                        newTrueAnswers = newTrueAnswers.filter(ansId => ansId !== AnswerId);
                                        updateQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                    }
                                    console.log(updateQuestionData);
                                });
                            });
                            //Xem trước ảnh, âm thanh, video đã có ở câu trả lời để phục vụ cho việc chỉnh sửa
                            const elmToAddFileReview = document.querySelector(`#answerToUpdateQuestion_${ans.AnswerId} th .answer-file-to-update-question`).parentNode;
                            if (ans.Type !== null && ans.Type !== undefined) {
                                if (ans.Type.indexOf("image") !== -1) {
                                    //Picture
                                    elem = document.createElement("img");
                                    elem.setAttribute("src", "/Admin/StreamFile/" + ans.DocId);
                                    elem.setAttribute("preload", "metadata");
                                    elem.setAttribute("height", "auto");
                                    elem.setAttribute("width", "auto");
                                    elem.classList.add("col-12");
                                    elem.classList.add("mb-2");

                                    elmToAddFileReview.appendChild(elem);
                                } else if (ans.Type.indexOf("audio") !== -1) {
                                    //Audio
                                    elem = document.createElement("audio");
                                    elem.setAttribute("src", "/Admin/StreamFile/" + ans.DocId);
                                    elem.setAttribute("controls", "controls");
                                    elem.setAttribute("preload", "metadata");
                                    elem.classList.add("col-12");
                                    elem.classList.add("mb-2");

                                    elmToAddFileReview.appendChild(elem);

                                } else if (ans.Type.indexOf("video") !== -1) {
                                    //Video
                                    elem = document.createElement("video");
                                    elem.setAttribute("src", "/Admin/StreamFile/" + ans.DocId);
                                    elem.setAttribute("controls", "controls");
                                    elem.setAttribute("preload", "metadata");
                                    elem.classList.add("col-12");
                                    elem.classList.add("mb-2");

                                    elmToAddFileReview.appendChild(elem);

                                }
                                if (ans.Type.indexOf("video") !== -1 || ans.Type.indexOf("image") !== -1 || ans.Type.indexOf("audio") !== -1) {
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(ans);
                                    let removeBtnElm = document.createElement("button");
                                    removeBtnElm.classList.add("btn");
                                    removeBtnElm.classList.add("btn-danger");
                                    removeBtnElm.classList.add("col-12");
                                    removeBtnElm.classList.add("remove-document-from-answer-to-update-question");
                                    removeBtnElm.innerHTML = `<i class="fas fa-minus"></i>`;
                                    removeBtnElm.addEventListener("click", e => {
                                        elmToAddFileReview.removeChild(elmToAddFileReview.lastChild);
                                        elmToAddFileReview.removeChild(elmToAddFileReview.lastChild);
                                        updateQuestionData.Answer[indexAnswerInArray]["DocId"] = undefined;
                                        updateQuestionData.Answer[indexAnswerInArray]["Type"] = "text";
                                        elmToAddFileReview.firstChild.value = "";
                                    })
                                    elmToAddFileReview.appendChild(removeBtnElm);
                                }

                            }
                        } else if (updateQuestionData.Type === "2") {
                            checkForLevel2 += 1
                            const tr = document.createElement("tr");
                            tr.setAttribute("id", `answerToUpdateQuestion_${ans.AnswerId}`);
                            tr.classList.add("answer-to-update-question");
                            if (checkForLevel2 === 1) {
                                tr.innerHTML = `<th class="text-center"><i class="fas fa-sort-down fa-2x"></i></th>
                                                                                                                                                                                                                                                                                                <th><input class="answer-content-to-update-question col-12" type="text" value="${ans.Content ? ans.Content : ""}"></th>
                                                                                                                                                                                                                                                                                                <th><input class="answer-file-to-update-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
                                                                                                                                                                                                                                                                                                <div class="progress d-none mb-4" id="progressFileAnswerToUpdate_${ans.AnswerId}">
                                                                                                                                                                                                                                                                                                </div></th>
                                                                                                                                                                                                                                                                                                <th>
                                                                                                                                                                                                                                                                                                </th>
                                                                                                                                                                                                                                                                                                `;
                            }
                            else if (checkForLevel2 === 2) {
                                tr.innerHTML = `<th class="text-center"><i class="fas fa-sort-up fa-2x"></i></th>
                                                                                                                                                                                                                                                                                                <th><input class="answer-content-to-update-question col-12" type="text" value="${ans.Content ? ans.Content : ""}"></th>
                                                                                                                                                                                                                                                                                                <th><input class="answer-file-to-update-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
                                                                                                                                                                                                                                                                                                <div class="progress d-none mb-4" id="progressFileAnswerToUpdate_${ans.AnswerId}">
                                                                                                                                                                                                                                                                                                </div></th>
                                                                                                                                                                                                                                                                                                <th>
                                                                                                                                                                                                                                                                                                <button class="btn btn-danger col-12 remove-answer-to-update-question">
                                                                                                                                                                                                                                                                                                <i class="fas fa-minus"></i>
                                                                                                                                                                                                                                                                                                </button>
                                                                                                                                                                                                                                                                                                </th>
                                                                                                                                                                                                                                                                                                `;
                                checkForLevel2 = 0;
                            }


                            answerToUpdateQuestionTableBody.appendChild(tr);
                            //Xóa câu trả lời
                            document.querySelectorAll(".remove-answer-to-update-question").forEach(elm => {
                                elm.addEventListener("click", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    //Cập nhật trả lời
                                    let indexAnswer = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.find(ans => String(ans.AnswerId) === String(AnswerId)));
                                    console.log(indexAnswer);
                                    updateQuestionData.Answer.splice(indexAnswer, 1);
                                    updateQuestionData.Answer.splice(indexAnswer - 1, 1);


                                    const node = elm.parentNode.parentNode.parentNode;
                                    const children = node.children;
                                    node.removeChild(children[indexAnswer]);
                                    node.removeChild(children[indexAnswer - 1]);
                                    console.log(updateQuestionData);
                                });
                            });
                            //Sửa nội dung
                            document.querySelectorAll(".answer-content-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => String(ans.AnswerId) === String(AnswerId))[0]);
                                    console.log(indexAnswerInArray);
                                    updateQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                    console.log(updateQuestionData);
                                });
                            });
                            //Thêm file đính kèm
                            document.querySelectorAll(".answer-file-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => String(ans.AnswerId) === String(AnswerId))[0]);
                                    if (elm.files[0] !== undefined && (elm.files[0].type.indexOf("audio") !== -1 || elm.files[0].type.indexOf("image") !== -1 || elm.files[0].type.indexOf("video") !== -1)) {
                                        let fileData = new FormData();
                                        fileData.append(elm.files[0].name, elm.files[0]);
                                        $.ajax({
                                            type: "POST",
                                            url: "/Admin/UploadDoc?Filename=", //Your own back-end uploader
                                            contentType: false,
                                            processData: false,
                                            data: fileData,
                                            async: true,
                                            success: function (response) {
                                                const jsonResponse = JSON.parse(response);
                                                console.log(jsonResponse);
                                                updateQuestionData.Answer[indexAnswerInArray]["DocId"] = jsonResponse.DocId;
                                                updateQuestionData.Answer[indexAnswerInArray]["Type"] = elm.files[0].type;
                                                console.log(updateQuestionData);
                                                updateProgressById("progressFileAnswerToUpdate_" + AnswerId, 0);

                                                let elem;
                                                const node = elm.parentNode
                                                if (elm.files[0].type.indexOf("image") !== -1) {
                                                    //Picture
                                                    elem = document.createElement("img");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.setAttribute("height", "auto");
                                                    elem.setAttribute("width", "auto");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");
                                                    if (node.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                } else if (elm.files[0].type.indexOf("audio") !== -1) {
                                                    //Audio
                                                    elem = document.createElement("audio");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("controls", "controls");
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");

                                                    if (node.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                } else if (elm.files[0].type.indexOf("video") !== -1) {
                                                    //Video
                                                    elem = document.createElement("video");
                                                    elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                    elem.setAttribute("controls", "controls");
                                                    elem.setAttribute("preload", "metadata");
                                                    elem.classList.add("col-12");
                                                    elem.classList.add("mb-2");

                                                    if (node.childElementCount === 4) {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                    }
                                                    node.appendChild(elem);
                                                }
                                                if (ans.Type.indexOf("video") !== -1 || ans.Type.indexOf("image") !== -1 || ans.Type.indexOf("audio") !== -1) {
                                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(ans);
                                                    let removeBtnElm = document.createElement("button");
                                                    removeBtnElm.classList.add("btn");
                                                    removeBtnElm.classList.add("btn-danger");
                                                    removeBtnElm.classList.add("col-12");
                                                    removeBtnElm.classList.add("remove-document-from-answer-to-update-question");
                                                    removeBtnElm.innerHTML = `<i class="fas fa-minus"></i>`;
                                                    removeBtnElm.addEventListener("click", e => {
                                                        node.removeChild(node.lastChild);
                                                        node.removeChild(node.lastChild);
                                                        updateQuestionData.Answer[indexAnswerInArray]["DocId"] = undefined;
                                                        updateQuestionData.Answer[indexAnswerInArray]["Type"] = "text";
                                                        node.firstChild.value = "";
                                                    })
                                                    node.appendChild(removeBtnElm);
                                                }
                                            },
                                            xhr: function () {
                                                let xhr = new window.XMLHttpRequest();
                                                xhr.upload.addEventListener("progress", function (evt) {
                                                    if (evt.lengthComputable) {
                                                        let percentComplete = Math.round((evt.loaded / evt.total) * 100);
                                                        if (percentComplete < 98) {
                                                            updateProgressById("progressFileAnswerToUpdate_" + AnswerId, percentComplete);
                                                        }
                                                    }
                                                }, false);
                                                return xhr;
                                            },
                                            error: () => {
                                                toastr.error("Lỗi tải lên file!");
                                            }
                                        });

                                    }
                                });
                            });

                            //Xem trước ảnh, âm thanh, video đã có ở câu trả lời để phục vụ cho việc chỉnh sửa
                            const elmToAddFileReview = document.querySelector(`#answerToUpdateQuestion_${ans.AnswerId} th .answer-file-to-update-question`).parentNode;
                            if (ans.Type !== null && ans.Type !== undefined) {
                                if (ans.Type.indexOf("image") !== -1) {
                                    //Picture
                                    elem = document.createElement("img");
                                    elem.setAttribute("src", "/Admin/StreamFile/" + ans.DocId);
                                    elem.setAttribute("preload", "metadata");
                                    elem.setAttribute("height", "auto");
                                    elem.setAttribute("width", "auto");
                                    elem.classList.add("col-12");
                                    elem.classList.add("mb-2");

                                    elmToAddFileReview.appendChild(elem);
                                } else if (ans.Type.indexOf("audio") !== -1) {
                                    //Audio
                                    elem = document.createElement("audio");
                                    elem.setAttribute("src", "/Admin/StreamFile/" + ans.DocId);
                                    elem.setAttribute("controls", "controls");
                                    elem.setAttribute("preload", "metadata");
                                    elem.classList.add("col-12");
                                    elem.classList.add("mb-2");

                                    elmToAddFileReview.appendChild(elem);

                                } else if (ans.Type.indexOf("video") !== -1) {
                                    //Video
                                    elem = document.createElement("video");
                                    elem.setAttribute("src", "/Admin/StreamFile/" + ans.DocId);
                                    elem.setAttribute("controls", "controls");
                                    elem.setAttribute("preload", "metadata");
                                    elem.classList.add("col-12");
                                    elem.classList.add("mb-2");

                                    elmToAddFileReview.appendChild(elem);

                                }
                                if (ans.Type.indexOf("video") !== -1 || ans.Type.indexOf("image") !== -1 || ans.Type.indexOf("audio") !== -1) {
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(ans);
                                    let removeBtnElm = document.createElement("button");
                                    removeBtnElm.classList.add("btn");
                                    removeBtnElm.classList.add("btn-danger");
                                    removeBtnElm.classList.add("col-12");
                                    removeBtnElm.classList.add("remove-document-from-answer-to-update-question");
                                    removeBtnElm.innerHTML = `<i class="fas fa-minus"></i>`;
                                    removeBtnElm.addEventListener("click", e => {
                                        elmToAddFileReview.removeChild(elmToAddFileReview.lastChild);
                                        elmToAddFileReview.removeChild(elmToAddFileReview.lastChild);
                                        updateQuestionData.Answer[indexAnswerInArray]["DocId"] = undefined;
                                        updateQuestionData.Answer[indexAnswerInArray]["Type"] = "text";
                                        elmToAddFileReview.firstChild.value = "";
                                    })
                                    elmToAddFileReview.appendChild(removeBtnElm);
                                }

                            }
                        } else if (updateQuestionData.Type === "3") {

                            const tr = document.createElement("tr");
                            tr.setAttribute("id", `answerToUpdateQuestion_${ans.AnswerId}`);
                            tr.classList.add("answer-to-update-question");
                            tr.innerHTML = `<th class="text-center">[${ans.AnswerId}]</th>
<th><input class="answer-content-to-create-question col-12" type="text" value=${ans.Content}></th>
<th></th>
<th>
<button class="btn btn-danger col-12 remove-answer-to-create-question">
<i class="fas fa-minus"></i>
</button>
</th>
`;

                            answerToUpdateQuestionTableBody.appendChild(tr);
                            //Xóa câu trả lời
                            document.querySelectorAll(".remove-answer-to-update-question").forEach(elm => {
                                elm.addEventListener("click", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);

                                    //Xóa dữ liệu câu trả lời
                                    let indexAnswer = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.find(ans => String(ans.AnswerId) === String(AnswerId)));
                                    console.log(indexAnswer);
                                    updateQuestionData.Answer.splice(indexAnswer, 1);
                                    //Xóa HTML
                                    const node = elm.parentNode.parentNode.parentNode;
                                    const children = node.children;
                                    node.removeChild(children[indexAnswer]);
                                    //Xóa trong texteditor
                                    const newContent = $('#summernoteUpdateQuestionTextEdit').summernote('code').replace(`[${AnswerId}]`, "")
                                    $('#summernoteUpdateQuestionTextEdit').summernote('code', newContent);
                                    console.log(updateQuestionData);
                                });
                            });
                            //Sửa nội dung
                            document.querySelectorAll(".answer-content-to-update-question").forEach(elm => {
                                elm.addEventListener("input", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    const indexAnswerInArray = updateQuestionData.Answer.indexOf(updateQuestionData.Answer.filter(ans => String(ans.AnswerId) === String(AnswerId))[0]);
                                    console.log(indexAnswerInArray);
                                    updateQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                    console.log(updateQuestionData);
                                });
                            });
                        } else if (updateQuestionData.Type === "6") {

                            const tr = document.createElement("tr");
                            tr.setAttribute("id", `answerToUpdateQuestion_${ans.AnswerId}`);
                            tr.classList.add("answer-to-update-question");
                            tr.innerHTML = `<th class="d-flex justify-content-center align-items-center"><input class="answer-right-to-update-question-type-6 col-2" type="checkbox" ${updateQuestionData.TrueAnswers.split(",").indexOf(String(ans.AnswerId)) !== -1 ? "checked" : ""}>
<label class="form-check-label ${ans.Content === "Richtig" ? "text-success" : "text-danger"} h5 font-weight-bold col-9 text-center">
                                                                            ${ans.Content}
                                                                          </label></th>`;
                            answerToUpdateQuestionTableBody.appendChild(tr);

                            //Chọn câu đúng
                            document.querySelectorAll(".answer-right-to-update-question-type-6").forEach(elm => {
                                elm.addEventListener("change", (e) => {
                                    const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                    console.log(AnswerId);
                                    if (e.target.checked) {
                                        document.querySelectorAll(".answer-right-to-update-question-type-6").forEach(elmToCheck => {
                                            const AnswerIdToCheck = elmToCheck.parentNode.parentNode.id.split("_")[1];
                                            if (AnswerIdToCheck !== AnswerId) {
                                                elmToCheck.checked = false;
                                            }
                                        })
                                        updateQuestionData.TrueAnswers = AnswerId;
                                    } else {
                                        document.querySelectorAll(".answer-right-to-update-question-type-6").forEach(elmToCheck => {
                                            const AnswerIdToCheck = elmToCheck.parentNode.parentNode.id.split("_")[1];
                                            if (AnswerIdToCheck !== AnswerId) {
                                                elmToCheck.checked = true;
                                                updateQuestionData.TrueAnswers = AnswerIdToCheck;
                                            }
                                        })
                                    }
                                    console.log(updateQuestionData);
                                });
                            });
                        }
                    })
                }
            })
            //Click Xóa
            document.querySelectorAll(".delete-question-btn").forEach(btn => {
                btn.addEventListener("click", e => {
                    e.preventDefault();
                    const quesId = btn.parentNode.parentNode.id.split("_")[1];
                    console.log(quesId)
                    document.getElementById("questionIdToDelete").value = quesId;
                })
            })
        }
        runAfterRender();


        //Tìm kiếm Câu Hỏi
        document.getElementById("searchQuestionInput").addEventListener("input", e => {
            e.preventDefault();
            const key = e.target.value;
            getQuestion(key, 15);
        })
        //Tạo Câu Hỏi
        const createQuestionBtn = document.getElementById("createQuestionBtn");
        createQuestionBtn.addEventListener("click", (e) => {
            e.preventDefault();
            //Thêm dữ liệu tags
            createQuestionData.Tag = $('#tagsCreateQuestion').val().join(",");
            //loại bỏ khoảng trắng rìa ngoài cho nội dung câu trả lời
            createQuestionData.Answer = createQuestionData.Answer.map(ans => {
                if (ans.Content === undefined || ans.Content === "" || ans.Content === null) {
                    return ans;
                }
                else {
                    const newAns = ans;
                    newAns.Content = newAns.Content.trim();
                    return newAns;
                }
            });
            //lọc tài liệu không có trong text edit
            if (createQuestionData.DocIdsContent !== null) {
                let docList = createQuestionData.DocIdsContent.split(",");
                const content = $('#summernoteCreateQuestionTextEdit').summernote('code');
                docList = docList.filter(docId => (content.indexOf("/Admin/StreamFile/" + docId) !== -1 || content.indexOf("/Admin/File/" + docId) !== -1));
                createQuestionData.DocIdsContent = docList.join(",");
            }
            //set lại id câu trả lời
            let oldContent = createQuestionData.Content.repeat(1);
            let oldTrueAnswers = createQuestionData.TrueAnswers.repeat(1);
            let oldAnswer = Array.from(new Set(createQuestionData.Answer));
            let newAnswer = [];
            let newTrueAnswers = [];
            createQuestionData.Answer.forEach(ans => {
                //lọc nội dung nếu dạng câu hỏi là dạng điền từ
                if (createQuestionData.Type === "3") {
                    const newQuesContent = createQuestionData.Content.replace(ans.AnswerId, createQuestionData.Answer.indexOf(ans));
                    createQuestionData.Content = newQuesContent;
                    console.log(newQuesContent);
                }

                //
                if (createQuestionData.TrueAnswers.split(",").indexOf(ans.AnswerId) !== -1) {
                    newTrueAnswers.push(createQuestionData.Answer.indexOf(ans));
                }
                newAnswer.push({ ...ans, AnswerId: createQuestionData.Answer.indexOf(ans) });
            });
            console.log(newTrueAnswers)
            createQuestionData.Answer = newAnswer;
            createQuestionData.TrueAnswers = newTrueAnswers.join(",");
            console.log(createQuestionData);
            if (createQuestionData.Type == "1") {
                //kiểm tra câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm
                let isAnswerEnoughInfo = true;
                createQuestionData.Answer.forEach(ans => {
                    if ((ans.Content === undefined || ans.Content === "") && (ans.DocId === undefined || ans.docId === "")) {
                        isAnswerEnoughInfo = false;
                    }
                })
                if (createQuestionData.Content === "" || !createQuestionData.Content || $('#summernoteCreateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.TrueAnswers = oldTrueAnswers;
                    return;
                }
                if (createQuestionData.Answer.length < 2) {
                    toastr.warning("Số câu trả lời phải lớn hơn hoặc bằng 2!")
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.TrueAnswers = oldTrueAnswers;
                    return
                }
                if (createQuestionData.TrueAnswers === "") {
                    toastr.warning("Số câu trả lời đúng phải lớn hơn 0!");
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.TrueAnswers = oldTrueAnswers;
                    return;
                }
                if (!isAnswerEnoughInfo) {
                    toastr.warning("Câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm!");
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.TrueAnswers = oldTrueAnswers;
                    return;
                }
            } else if (createQuestionData.Type == "2") {
                //kiểm tra câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm
                let isAnswerEnoughInfo = true;
                createQuestionData.Answer.forEach(ans => {
                    if ((ans.Content === undefined || ans.Content === "") && (ans.DocId === undefined || ans.DocId === "")) {
                        isAnswerEnoughInfo = false;
                    }
                })
                let isUnnecessaryInfo = false;
                createQuestionData.Answer.forEach(ans => {
                    if (ans.Content !== undefined && ans.Content === "" && ans.DocId === undefined && ans.DocId === "") {
                        isUnnecessaryInfo = true;
                    }
                })
                if (createQuestionData.Content === "" || !createQuestionData.Content || $('#summernoteCreateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    createQuestionData.Answer = oldAnswer;
                    return;
                }
                if (createQuestionData.Answer.length < 4) {
                    toastr.warning("Số cặp câu nối ít nhất phải lớn hơn hoặc bằng 2")
                    createQuestionData.Answer = oldAnswer;
                    return
                }
                if (!isAnswerEnoughInfo) {
                    toastr.warning("Câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm!");
                    createQuestionData.Answer = oldAnswer;
                    return;
                }
                if (isUnnecessaryInfo) {
                    toastr.warning("Câu chỉ được có một trong hai thứ nội dung hoặc file đính kèm!");
                    createQuestionData.Answer = oldAnswer;
                    return;
                }
            } else if (createQuestionData.Type == "3") {
                //kiểm tra câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm
                let isAnswerEnoughInfo = true;
                createQuestionData.Answer.forEach(ans => {
                    if (ans.Content === undefined || ans.Content === "") {
                        isAnswerEnoughInfo = false;
                    }
                })
                if (createQuestionData.Content === "" || !createQuestionData.Content || $('#summernoteCreateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.Content = oldContent;
                    return;
                }
                if (createQuestionData.Answer.length < 1) {
                    toastr.warning("Số cụm từ đúng phải lớn hơn hoặc bằng 1!")
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.Content = oldContent;
                    return
                }
                if (!isAnswerEnoughInfo) {
                    toastr.warning("Nội dung cụm từ đúng không được để trống!");
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.Content = oldContent;
                    return;
                }
            } else if (createQuestionData.Type == "4") {
                if (createQuestionData.Content === "" || !createQuestionData.Content || $('#summernoteCreateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                }
            } else if (createQuestionData.Type == "5") {
                if (createQuestionData.Content === "" || !createQuestionData.Content || $('#summernoteCreateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    return;
                }
            }
            else if (createQuestionData.Type == "6") {
                //kiểm tra câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm
                if (createQuestionData.Content === "" || !createQuestionData.Content || $('#summernoteCreateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.TrueAnswers = oldTrueAnswers;
                    return;
                }
            }

            createQuestionBtn.disabled = true;
            closeCreateQuestionContainerBtn.disabled = true;
            $.ajax({
                url: "/Admin/CreateQuestion",
                type: "POST",
                data: { dataToCreate: createQuestionData },
                dataType: "json",
                success: function (data) {
                    console.log(JSON.parse(data));
                    toastr.success("Thành công tạo câu hỏi");
                    createQuestionBtn.disabled = false;
                    closeCreateQuestionContainerBtn.disabled = false;
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.TrueAnswers = oldTrueAnswers;
                    createQuestionData.Content = oldContent;
                    const key = document.getElementById("searchQuestionInput").value;
                    const numberRecord = document.querySelectorAll(".question-record").length;
                    getQuestion(key, numberRecord > 14 ? numberRecord + 1 : 15);
                },
                error: function (errMsg) {
                    toastr.error("Lỗi!");
                    createQuestionBtn.disabled = false;
                    closeCreateQuestionContainerBtn.disabled = false;
                    createQuestionData.Answer = oldAnswer;
                    createQuestionData.TrueAnswers = oldTrueAnswers;
                    createQuestionData.Content = oldContent;
                }
            });
        })
        //Cập Nhật Câu Hỏi
        const updateQuestionBtn = document.getElementById("updateQuestionBtn");
        updateQuestionBtn.addEventListener("click", e => {
            e.preventDefault();
            //Thêm dữ liệu tags
            updateQuestionData.Tag = $('#tagsUpdateQuestion').val().join(",");
            //loại bỏ khoảng trắng rìa ngoài cho nội dung câu trả lời
            updateQuestionData.Answer = updateQuestionData.Answer.map(ans => {
                if (ans.Content === undefined || ans.Content === "" || ans.Content === null) {
                    return ans;
                }
                else {
                    const newAns = ans;
                    newAns.Content = newAns.Content.trim();
                    return newAns;
                }
            });
            //lọc tài liệu không có trong text edit
            if (updateQuestionData.DocIdsContent !== null) {
                let docList = updateQuestionData.DocIdsContent.split(",");
                const content = $('#summernoteUpdateQuestionTextEdit').summernote('code');
                docList = docList.filter(docId => (content.indexOf("/Admin/StreamFile/" + docId) !== -1 || content.indexOf("/Admin/File/" + docId) !== -1));
                updateQuestionData.DocIdsContent = docList.join(",");
            }
            //set lại id câu trả lời
            let oldContent = updateQuestionData.Content.repeat(1);
            let oldTrueAnswers = updateQuestionData.TrueAnswers.repeat(1);
            let oldAnswer = Array.from(new Set(updateQuestionData.Answer));
            let newAnswer = [];
            let newTrueAnswer = [];
            updateQuestionData.Answer.forEach(ans => {
                if (updateQuestionData.Type === "3") {
                    const newQuesContent = updateQuestionData.Content.replace(ans.AnswerId, updateQuestionData.Answer.indexOf(ans));
                    updateQuestionData.Content = newQuesContent;
                    console.log(newQuesContent);
                }
                if (updateQuestionData.TrueAnswers.split(",").indexOf(String(ans.AnswerId)) !== -1) {
                    newTrueAnswer.push(updateQuestionData.Answer.indexOf(ans));
                }
                newAnswer.push({ ...ans, AnswerId: updateQuestionData.Answer.indexOf(ans) });

            });
            updateQuestionData.Answer = newAnswer;
            updateQuestionData.TrueAnswers = newTrueAnswer.join(",");
            console.log(updateQuestionData);
            if (updateQuestionData.Type === "1") {
                //kiểm tra câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm
                let isAnswerEnoughInfo = true;
                updateQuestionData.Answer.forEach(ans => {
                    if ((ans.Content === undefined || ans.Content === "" || ans.Content === null) && (ans.DocId === undefined || ans.DocId === "" || ans.DocId === null)) {
                        isAnswerEnoughInfo = false;
                    }
                })
                if (updateQuestionData.Content === "" || !updateQuestionData.Content || $('#summernoteUpdateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.TrueAnswers = oldTrueAnswers;
                    return;
                }
                if (updateQuestionData.Answer.length < 2) {
                    toastr.warning("Số câu trả lời phải lớn hơn hoặc bằng 2!")
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.TrueAnswers = oldTrueAnswers;
                    return
                }
                if (updateQuestionData.TrueAnswers === "") {
                    toastr.warning("Số câu trả lời đúng phải lớn hơn 0!");
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.TrueAnswers = oldTrueAnswers;
                    return;
                }
                if (!isAnswerEnoughInfo) {
                    toastr.warning("Câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm!");
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.TrueAnswers = oldTrueAnswers;
                    return;
                }
            } else if (updateQuestionData.Type === "2") {
                //kiểm tra câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm
                let isAnswerEnoughInfo = true;
                updateQuestionData.Answer.forEach(ans => {
                    if ((ans.Content === undefined || ans.Content === "") && (ans.DocId === undefined || ans.docId === "")) {
                        isAnswerEnoughInfo = false;
                    }
                })
                let isUnnecessaryInfo = false;
                updateQuestionData.Answer.forEach(ans => {
                    if (ans.Content !== undefined && ans.Content === "" && ans.DocId === undefined && ans.docId === "") {
                        isUnnecessaryInfo = true;
                    }
                })
                if (updateQuestionData.Content === "" || !updateQuestionData.Content || $('#summernoteUpdateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    updateQuestionData.Answer = oldAnswer;
                    return;
                }
                if (updateQuestionData.Answer.length < 4) {
                    toastr.warning("Số cặp câu nối ít nhất phải lớn hơn hoặc bằng 2")
                    updateQuestionData.Answer = oldAnswer;
                    return
                }
                if (!isAnswerEnoughInfo) {
                    toastr.warning("Câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm!");
                    updateQuestionData.Answer = oldAnswer;
                    return;
                }
                if (isUnnecessaryInfo) {
                    toastr.warning("Câu chỉ được có một trong hai thứ nội dung hoặc file đính kèm!");
                    updateQuestionData.Answer = oldAnswer;
                    return;
                }
            } else if (updateQuestionData.Type === "3") {
                //kiểm tra câu trả lời phải có một trong hai thứ nội dung hoặc file đính kèm
                let isAnswerEnoughInfo = true;
                updateQuestionData.Answer.forEach(ans => {
                    if (ans.Content === undefined || ans.Content === "") {
                        isAnswerEnoughInfo = false;
                    }
                })
                if (updateQuestionData.Content === "" || !updateQuestionData.Content || $('#summernoteUpdateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.Content = oldContent;
                    return;
                }
                if (updateQuestionData.Answer.length < 1) {
                    toastr.warning("Số cụm từ đúng phải lớn hơn hoặc bằng 1!")
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.Content = oldContent;
                    return
                }

                if (!isAnswerEnoughInfo) {
                    toastr.warning("Nội dung cụm từ đúng không được để trống!");
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.Content = oldContent;
                    return;
                }
            } else if (updateQuestionData.Type === "4") {
                if (updateQuestionData.Content === "" || !updateQuestionData.Content || $('#summernoteUpdateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    updateQuestionData.Answer = oldAnswer;
                    return;
                }
            } else if (updateQuestionData.Type === "5") {
                if (updateQuestionData.Content === "" || !updateQuestionData.Content || $('#summernoteUpdateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    updateQuestionData.Answer = oldAnswer;
                    return;
                }
            } else if (updateQuestionData.Type === "6") {
                if (updateQuestionData.Content === "" || !updateQuestionData.Content || $('#summernoteUpdateQuestionTextEdit').summernote('isEmpty')) {
                    toastr.warning("Nội dung câu hỏi không được để trống!");
                    updateQuestionData.Answer = oldAnswer;
                    return;
                }
            }

            updateQuestionBtn.disabled = true;
            $.ajax({
                url: "/Admin/UpdateQuestion",
                type: "POST",
                data: { dataToUpdate: updateQuestionData },
                dataType: "json",
                success: function (data) {
                    console.log(JSON.parse(data));
                    toastr.success("Thành công cập nhật câu hỏi");
                    updateQuestionBtn.disabled = false;
                    closeUpdateQuestionContainerBtn.click();
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.TrueAnswers = oldTrueAnswers;
                    if (updateQuestionData.Type === "3") {
                        updateQuestionData.Content = oldContent;
                    }
                    const key = document.getElementById("searchQuestionInput").value;
                    const numberRecord = document.querySelectorAll(".question-record").length;
                    getQuestion(key, numberRecord > 14 ? numberRecord : 15);
                },
                error: function (errMsg) {
                    toastr.error("Lỗi cập nhật câu hỏi!");
                    updateQuestionBtn.disabled = false;
                    updateQuestionData.Answer = oldAnswer;
                    updateQuestionData.TrueAnswers = oldTrueAnswers;
                    if (updateQuestionData.Type === "3") {
                        updateQuestionData.Content = oldContent;
                    }
                }
            });
        })
        //Xóa Câu hỏi
        const deleteQuestionBtn = document.getElementById("deleteQuestionBtn");
        deleteQuestionBtn.addEventListener("click", (e) => {
            const questionId = document.getElementById("questionIdToDelete").value;
            console.log(questionId);
            deleteQuestionBtn.disabled = true;
            $.ajax({
                url: "/Admin/DeleteQuestion",
                type: "POST",
                data: { IdQuestion: questionId },
                dataType: "json",
                success: function (data) {
                    console.log(JSON.parse(data));
                    toastr.success("Thành công xóa câu hỏi");
                    $('#deleteModal').modal('hide');
                    const key = document.getElementById("searchQuestionInput").value;
                    getQuestion(key, 15);
                    deleteQuestionBtn.disabled = false;
                },
                error: function (errMsg) {
                    toastr.error("Lỗi xóa câu hỏi!");
                    createQuestionBtn.disabled = false;
                }
            });
        })
        //progress upload file
        const updateProgressById = (idProgresss, percent) => {
            if (percent > 0 && percent <= 100) {
                document.getElementById(idProgresss).classList.remove("d-none");
                document.getElementById(idProgresss).innerHTML = `<div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="${percent}" aria-valuemin="0" aria-valuemax="100" style="width: ${percent}%"></div>`
            }
            else {
                document.getElementById(idProgresss).classList.add("d-none");
            }
        }
        //Tải lên file để tạo câu hỏi
        function uploadDocCallBack(file) {
            let fileData = new FormData();
            fileData.append(file.name, file);
            $.ajax({
                type: "POST",
                url: "/Admin/UploadDoc?Filename=", //Your own back-end uploader
                contentType: false,
                processData: false,
                data: fileData,
                async: true,
                success: function (response) {
                    const jsonResponse = JSON.parse(response);
                    console.log(jsonResponse);
                    let listDoc = createQuestionData.DocIdsContent.split(",");
                    listDoc.push(jsonResponse.DocId);
                    createQuestionData.DocIdsContent = listDoc.join(",");
                    console.log(createQuestionData)

                    updateProgressById("progressCreateQuestionTextEdit", 0);
                    let elem;

                    if (file.type.indexOf("image") !== -1) {
                        //Picture
                        elem = document.createElement("img");
                        elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                        elem.setAttribute("preload", "metadata");
                        elem.setAttribute("height", "auto");
                        elem.setAttribute("width", "auto");
                        elem.classList.add("col-12");
                        $('#summernoteCreateQuestionTextEdit').summernote('editor.insertNode', elem);
                    } else if (file.type.indexOf("audio") !== -1) {
                        //Audio
                        elem = document.createElement("audio");
                        elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                        elem.setAttribute("controls", "controls");
                        elem.setAttribute("preload", "metadata");
                        elem.classList.add("col-12");
                        $('#summernoteCreateQuestionTextEdit').summernote('editor.insertNode', elem);
                    } else if (file.type.indexOf("video") !== -1) {
                        //Video
                        elem = document.createElement("video");
                        elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                        elem.setAttribute("controls", "controls");
                        elem.setAttribute("preload", "metadata");
                        elem.classList.add("col-12");
                        $('#summernoteCreateQuestionTextEdit').summernote('editor.insertNode', elem);
                    } else {
                        //Other file type
                        elem = document.createElement("a");
                        let linkText = document.createTextNode(file.name);
                        elem.appendChild(linkText);
                        elem.title = file.name;
                        elem.href = "/Admin/File/" + jsonResponse.DocId;
                        $('#summernoteCreateQuestionTextEdit').summernote('editor.insertNode', elem);
                    }
                },
                xhr: function () {
                    let xhr = new window.XMLHttpRequest();
                    xhr.upload.addEventListener("progress", function (evt) {
                        if (evt.lengthComputable) {
                            let percentComplete = Math.round((evt.loaded / evt.total) * 100);
                            if (percentComplete < 98) {
                                updateProgressById("progressCreateQuestionTextEdit", percentComplete);
                            }
                        }
                    }, false);
                    return xhr;
                },
                error: () => {
                    toastr.error("Lỗi tải lên file!");
                }
            });
        }
        //Tải lên file để cập nhật câu hỏi
        function uploadDocToUpdateCallBack(file) {
            let fileData = new FormData();
            fileData.append(file.name, file);
            $.ajax({
                type: "POST",
                url: "/Admin/UploadDoc?Filename=", //Your own back-end uploader
                contentType: false,
                processData: false,
                data: fileData,
                async: true,
                success: function (response) {
                    const jsonResponse = JSON.parse(response);
                    console.log(jsonResponse);
                    console.log(updateQuestionData);
                    if (updateQuestionData.DocIdsContent === null) {
                        updateQuestionData.DocIdsContent = String(jsonResponse.DocId);
                    }
                    else {
                        let listDoc = updateQuestionData.DocIdsContent.split(",");
                        listDoc.push(jsonResponse.DocId);
                        updateQuestionData.DocIdsContent = listDoc.join(",");
                    }
                    console.log(updateQuestionData)

                    updateProgressById("progressUpdateQuestionTextEdit", 0);
                    let elem;

                    if (file.type.indexOf("image") !== -1) {
                        //Picture
                        elem = document.createElement("img");
                        elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                        elem.setAttribute("preload", "metadata");
                        elem.setAttribute("height", "auto");
                        elem.setAttribute("width", "auto");
                        elem.classList.add("col-12");
                        $('#summernoteUpdateQuestionTextEdit').summernote('editor.insertNode', elem);
                    } else if (file.type.indexOf("audio") !== -1) {
                        //Audio
                        elem = document.createElement("audio");
                        elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                        elem.setAttribute("controls", "controls");
                        elem.setAttribute("preload", "metadata");
                        elem.classList.add("col-12");
                        $('#summernoteUpdateQuestionTextEdit').summernote('editor.insertNode', elem);
                    } else if (file.type.indexOf("video") !== -1) {
                        //Video
                        elem = document.createElement("video");
                        elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                        elem.setAttribute("controls", "controls");
                        elem.setAttribute("preload", "metadata");
                        elem.classList.add("col-12");
                        $('#summernoteUpdateQuestionTextEdit').summernote('editor.insertNode', elem);
                    } else {
                        //Other file type
                        elem = document.createElement("a");
                        let linkText = document.createTextNode(file.name);
                        elem.appendChild(linkText);
                        elem.title = file.name;
                        elem.href = "/Admin/File/" + jsonResponse.DocId;
                        $('#summernoteUpdateQuestionTextEdit').summernote('editor.insertNode', elem);
                    }
                },
                xhr: function () {
                    let xhr = new window.XMLHttpRequest();
                    xhr.upload.addEventListener("progress", function (evt) {
                        if (evt.lengthComputable) {
                            let percentComplete = Math.round((evt.loaded / evt.total) * 100);
                            if (percentComplete < 98) {
                                updateProgressById("progressUpdateQuestionTextEdit", percentComplete);
                            }
                        }
                    }, false);
                    return xhr;
                },
                error: () => {
                    toastr.error("Lỗi tải lên file!");
                }
            });
        }
        //Mở giao diện thêm câu hỏi mới
        const openCreateQuestionContainerBtn = document.getElementById("openCreateQuestionContainerBtn");
        openCreateQuestionContainerBtn.addEventListener("click", (e) => {
            e.preventDefault();
            openCreateQuestionContainerBtn.classList.add("d-none");
            const selectTypeToCreateQuestionContainer = document.getElementById("selectTypeToCreateQuestionContainer");
            selectTypeToCreateQuestionContainer.classList.remove("d-none");
        });
        //Chọn loại câu hỏi cần thêm
        const selectTypeQuestionsBtns = document.querySelectorAll(".select-type-question-btn");
        selectTypeQuestionsBtns.forEach(btn => {
            btn.addEventListener("click", e => {
                e.preventDefault();
                const selectTypeToCreateQuestionContainer = document.getElementById("selectTypeToCreateQuestionContainer");
                selectTypeToCreateQuestionContainer.classList.add("d-none");
                const typeQuestion = btn.firstChild.innerText;
                console.log(createQuestionData);
                document.getElementById("createQuestionContainer").classList.remove("d-none");

                //load chọn tag

                $("#tagsCreateQuestion").select2({
                    tags: true,
                    tokenSeparators: [','],
                    createTag: function (params) {
                        const term = $.trim(params.term);


                        if (term === '') {
                            return null;
                        }
                        return {
                            id: term,
                            text: term,
                            newTag: true // add additional parameters
                        }
                    }
                })
                //Tùy chỉnh nội dung cột phù hợp với câu hỏi
                if (typeQuestion === "Câu hỏi có một hoặc nhiều câu trả lời") {
                    createQuestionData["Type"] = "1";
                    const elmToDisplay = document.getElementById("createQuestionContainer").children;
                    elmToDisplay.item(0).className = "col-5";
                    elmToDisplay.item(1).className = "col-7";
                    const elmToRemove = document.querySelector("#answerToCreateQuestionTable thead tr").children;
                    elmToRemove.item(3).className = ``;
                    elmToRemove.item(2).className = ``;
                    elmToRemove.item(1).className = ``;
                    elmToRemove.item(2).innerHTML = `File Đính Kèm (video, âm thanh, hình ảnh)`;
                    elmToRemove.item(1).innerHTML = `Nội dung`;
                    elmToRemove.item(1).style.width = `35%`;
                    elmToRemove.item(0).innerHTML = `Câu Đúng&nbsp;<i class="fas fa-check"></i>`;
                    elmToRemove.item(0).style.width = `14%`;
                    document.getElementById("answerToCreateQuestionTableBody").parentNode.parentNode.style.overflowX = "";
                    //load summernote
                    $('#summernoteCreateQuestionTextEdit').summernote({
                        minHeight: 300,
                        lineHeight: "0.6",
                        toolbar: [
                            ['style', ['fontname', 'fontsize']],
                            ['font', ['bold', 'italic', 'underline', 'clear']],
                            ['color', ['color']],
                            ['para', ['ul', 'ol', 'paragraph', "height"]],
                            ['table', ['table']],
                            ['insert', ["file"]],
                            ['view', ['fullscreen']]
                        ],
                        callbacks: {
                            onFileUpload: function (files) {
                                console.log(files[0]);
                                uploadDocCallBack(files[0]);
                            },
                            onChange: function (contents, $editable) {
                                createQuestionData["Content"] = contents;
                                console.log(createQuestionData);
                            }
                        },
                    });
                } else if (typeQuestion === "Câu hỏi nối") {
                    createQuestionData["Type"] = "2";
                    const elmToDisplay = document.getElementById("createQuestionContainer").children;
                    elmToDisplay.item(0).className = "col-5";
                    elmToDisplay.item(1).className = "col-7";
                    const elmToRemove = document.querySelector("#answerToCreateQuestionTable thead tr").children;
                    elmToRemove.item(3).className = ``;
                    elmToRemove.item(2).className = ``;
                    elmToRemove.item(1).className = ``;
                    elmToRemove.item(2).innerHTML = `File Đính Kèm (video, âm thanh, hình ảnh)`;
                    elmToRemove.item(1).innerHTML = `Nội dung`;
                    elmToRemove.item(1).style.width = `35%`;
                    elmToRemove.item(0).innerHTML = ``;
                    elmToRemove.item(0).style.width = `14%`;
                    document.getElementById("answerToCreateQuestionTableBody").parentNode.parentNode.style.overflowX = "";

                    //load summernote
                    $('#summernoteCreateQuestionTextEdit').summernote({
                        minHeight: 300,
                        lineHeight: "0.6",
                        toolbar: [
                            ['style', ['fontname', 'fontsize']],
                            ['font', ['bold', 'italic', 'underline', 'clear']],
                            ['color', ['color']],
                            ['para', ['ul', 'ol', 'paragraph', "height"]],
                            ['table', ['table']],
                            ['insert', ["file"]],
                            ['view', ['fullscreen']]
                        ],
                        callbacks: {
                            onFileUpload: function (files) {
                                console.log(files[0]);
                                uploadDocCallBack(files[0]);
                            },
                            onChange: function (contents, $editable) {
                                createQuestionData["Content"] = contents;
                                console.log(createQuestionData);
                            }
                        },
                    });
                } else if (typeQuestion === "Câu hỏi điền từ") {
                    createQuestionData["Type"] = "3";
                    const elmToDisplay = document.getElementById("createQuestionContainer").children;
                    elmToDisplay.item(0).className = "col-5";
                    elmToDisplay.item(1).className = "col-7";
                    const elmToRemove = document.querySelector("#answerToCreateQuestionTable thead tr").children;
                    elmToRemove.item(3).className = ``;
                    elmToRemove.item(2).className = ``;
                    elmToRemove.item(1).className = ``;
                    elmToRemove.item(2).innerHTML = ``;
                    elmToRemove.item(1).innerHTML = `Cụm từ đúng`;
                    elmToRemove.item(1).style.width = ``;
                    elmToRemove.item(0).innerHTML = `Id`;
                    elmToRemove.item(0).style.width = `26%`;
                    document.getElementById("answerToCreateQuestionTableBody").parentNode.parentNode.style.overflowX = "";

                    //load summernote
                    $('#summernoteCreateQuestionTextEdit').summernote({
                        minHeight: 300,
                        lineHeight: "0.6",
                        toolbar: [
                            ['style', ['fontname', 'fontsize']],
                            ['font', ['bold', 'italic', 'underline', 'clear']],
                            ['color', ['color']],
                            ['para', ['ul', 'ol', 'paragraph', "height"]],
                            ['table', ['table']],
                            ['insert', ["file"]],
                            ['view', ['fullscreen']]
                        ],
                        callbacks: {
                            onFileUpload: function (files) {
                                console.log(files[0]);
                                uploadDocCallBack(files[0]);
                            },
                            onChange: function (contents, $editable) {
                                createQuestionData["Content"] = contents;
                                createQuestionData.Answer = createQuestionData.Answer.filter(ans => contents.indexOf(`[${ans.AnswerId}]`) !== -1);
                                console.log(createQuestionData.Answer)
                                document.querySelectorAll(".answer-to-create-question").forEach(ansElm => {
                                    const idAnswer = ansElm.id.split("_")[1];
                                    const resultFind = createQuestionData.Answer.find(ans => String(idAnswer) === String(ans.AnswerId))
                                    console.log(resultFind)
                                    if (resultFind === undefined) {
                                        const node = ansElm.parentNode;
                                        node.removeChild(ansElm);
                                    };
                                })
                                console.log(createQuestionData);
                            }
                        },
                    });
                }
                else if (typeQuestion === "Câu hỏi viết lại câu") {
                    createQuestionData["Type"] = "4";
                    const elmToDisplay = document.getElementById("createQuestionContainer").children;
                    elmToDisplay.item(0).className = "col-12";
                    elmToDisplay.item(1).className = "d-none";
                    //load summernote
                    $('#summernoteCreateQuestionTextEdit').summernote({
                        minHeight: 300,
                        lineHeight: "0.6",
                        toolbar: [
                            ['style', ['fontname', 'fontsize']],
                            ['font', ['bold', 'italic', 'underline', 'clear']],
                            ['color', ['color']],
                            ['para', ['ul', 'ol', 'paragraph', "height"]],
                            ['table', ['table']],
                            ['insert', ["file"]],
                            ['view', ['fullscreen']]
                        ],
                        callbacks: {
                            onFileUpload: function (files) {
                                console.log(files[0]);
                                uploadDocCallBack(files[0]);
                            },
                            onChange: function (contents, $editable) {
                                createQuestionData["Content"] = contents;
                                console.log(createQuestionData);
                            }
                        },
                    });
                } else if (typeQuestion === "Câu hỏi tự luận") {
                    createQuestionData["Type"] = "5";
                    const elmToDisplay = document.getElementById("createQuestionContainer").children;
                    elmToDisplay.item(0).className = "col-12";
                    elmToDisplay.item(1).className = "d-none";
                    //load summernote
                    $('#summernoteCreateQuestionTextEdit').summernote({
                        minHeight: 300,
                        lineHeight: "0.6",
                        toolbar: [
                            ['style', ['fontname', 'fontsize']],
                            ['font', ['bold', 'italic', 'underline', 'clear']],
                            ['color', ['color']],
                            ['para', ['ul', 'ol', 'paragraph', "height"]],
                            ['table', ['table']],
                            ['insert', ["file"]],
                            ['view', ['fullscreen']]
                        ],
                        callbacks: {
                            onFileUpload: function (files) {
                                console.log(files[0]);
                                uploadDocCallBack(files[0]);
                            },
                            onChange: function (contents, $editable) {
                                createQuestionData["Content"] = contents;
                                console.log(createQuestionData);
                            }
                        },
                    });
                } else if (typeQuestion === "Câu hỏi đúng hoặc sai") {
                    createQuestionData["Type"] = "6";
                    const elmToDisplay = document.getElementById("createQuestionContainer").children;
                    elmToDisplay.item(0).className = "col-10";
                    elmToDisplay.item(1).className = "col-2";
                    const elmToRemove = document.querySelector("#answerToCreateQuestionTable thead tr").children;
                    elmToRemove.item(3).className = `d-none`;
                    elmToRemove.item(2).className = `d-none`;
                    elmToRemove.item(1).className = `d-none`;
                    elmToRemove.item(0).innerHTML = `Đáp án&nbsp;<i class="fas fa-check"></i>`;
                    elmToRemove.item(0).style.width = `100%`;
                    document.getElementById("answerToCreateQuestionTableBody").parentNode.parentNode.style.overflowX = "hidden";
                    //load summernote
                    $('#summernoteCreateQuestionTextEdit').summernote({
                        minHeight: 300,
                        lineHeight: "0.6",
                        toolbar: [
                            ['style', ['fontname', 'fontsize']],
                            ['font', ['bold', 'italic', 'underline', 'clear']],
                            ['color', ['color']],
                            ['para', ['ul', 'ol', 'paragraph', "height"]],
                            ['table', ['table']],
                            ['insert', ["file"]],
                            ['view', ['fullscreen']]
                        ],
                        callbacks: {
                            onFileUpload: function (files) {
                                console.log(files[0]);
                                uploadDocCallBack(files[0]);
                            },
                            onChange: function (contents, $editable) {
                                createQuestionData["Content"] = contents;
                                console.log(createQuestionData);
                            }
                        },
                    });
                    //create question
                    let indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                    if (document.getElementById(`answerToCreateQuestion_${indexAnswerToCreateQuestion}`) !== undefined) {
                        indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                    }
                    let indexAnswerToCreateQuestion_2 = Math.random().toString(36).slice(2);
                    if (document.getElementById(`answerToCreateQuestion_${indexAnswerToCreateQuestion_2}`) !== undefined) {
                        indexAnswerToCreateQuestion_2 = Math.random().toString(36).slice(2);
                    }
                    document.getElementById("answerToCreateQuestionTableBody").innerHTML = `<tr id="answerToCreateQuestion_${indexAnswerToCreateQuestion}" class="answer-to-create-question"><th class="d-flex justify-content-center align-items-center"><input class="answer-right-to-create-question_type_6 col-2" type="checkbox" checked><label class="form-check-label text-success h5 font-weight-bold col-9 text-center">
                                                                            Richtig
                                                                          </label></th></tr>

<tr id="answerToCreateQuestion_${indexAnswerToCreateQuestion_2}" class="answer-to-create-question"><th class="d-flex justify-content-center align-items-center"><input class="answer-right-to-create-question_type_6 col-2" type="checkbox"><label class="form-check-label text-danger h5 font-weight-bold col-9 text-center">
                                                                            Falsch
                                                                          </label></th></tr>`;
                    //add answer to create data
                    createQuestionData.Answer.push({ AnswerId: indexAnswerToCreateQuestion, Content: "Richtig" })
                    createQuestionData.Answer.push({ AnswerId: indexAnswerToCreateQuestion_2, Content: "Falsch" })
                    createQuestionData.TrueAnswers = indexAnswerToCreateQuestion
                    //Chọn câu đúng
                    document.querySelectorAll(".answer-right-to-create-question_type_6").forEach(elm => {
                        elm.onclick = (e) => {
                            const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                            console.log(AnswerId);
                            if (e.target.checked) {
                                document.querySelectorAll(".answer-right-to-create-question_type_6").forEach(elmToUnCheck => {
                                    elmToUnCheck.checked = false;
                                });
                                e.target.checked = true;
                                if (AnswerId === indexAnswerToCreateQuestion) {
                                    createQuestionData.TrueAnswers = indexAnswerToCreateQuestion;
                                } else {
                                    createQuestionData.TrueAnswers = indexAnswerToCreateQuestion_2;
                                }
                            } else {
                                document.querySelectorAll(".answer-right-to-create-question_type_6").forEach(elmToUnCheck => {
                                    elmToUnCheck.checked = true;
                                });
                                e.target.checked = false;
                                if (AnswerId === indexAnswerToCreateQuestion) {
                                    createQuestionData.TrueAnswers = indexAnswerToCreateQuestion_2;
                                } else {
                                    createQuestionData.TrueAnswers = indexAnswerToCreateQuestion;
                                }
                            }
                            console.log(createQuestionData);
                        };
                    });
                }
                const answerToCreateQuestionTableBody = document.getElementById("answerToCreateQuestionTableBody");
                //Thêm câu trả lời mới vào câu hỏi của giao diện thêm câu hỏi
                const addAnswerToCreateQuestionBtn = document.getElementById("addAnswerToCreateQuestion");
                addAnswerToCreateQuestionBtn.onclick = (e) => {

                    if (createQuestionData.Type === "1") {

                        let indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                        if (document.getElementById(`answerToCreateQuestion_${indexAnswerToCreateQuestion}`) !== undefined) {
                            indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                        }
                        const tr = document.createElement("tr");
                        tr.setAttribute("id", `answerToCreateQuestion_${indexAnswerToCreateQuestion}`);
                        tr.classList.add("answer-to-create-question");
                        tr.innerHTML = `<th class="text-center"><input class="answer-right-to-create-question" type="checkbox"></th>
<th><input class="answer-content-to-create-question col-12" type="text"></th>
<th><input class="answer-file-to-create-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
<div class="progress d-none mb-4" id="progressFileAnswer_${indexAnswerToCreateQuestion}">
</div></th>
<th>
<button class="btn btn-danger col-12 remove-answer-to-create-question">
<i class="fas fa-minus"></i>
</button>
</th>
`;
                        answerToCreateQuestionTableBody.appendChild(tr);
                        createQuestionData.Answer.push({ AnswerId: indexAnswerToCreateQuestion, Content: "" })

                        console.log(createQuestionData);
                        //Xóa câu trả lời
                        document.querySelectorAll(".remove-answer-to-create-question").forEach(elm => {
                            elm.addEventListener("click", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);
                                //Cập nhật câu hỏi
                                const newAnswers = createQuestionData.Answer.filter(ans => String(ans.AnswerId) !== String(AnswerId));
                                createQuestionData.Answer = newAnswers;
                                //Cập nhật câu trả lời đúng
                                let newTrueAnswers = createQuestionData.TrueAnswers.split(",");
                                newTrueAnswers = newTrueAnswers.filter(ans => ans !== AnswerId);
                                createQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                elm.parentNode.parentNode.parentNode.removeChild(elm.parentNode.parentNode);
                                console.log(createQuestionData);
                            });
                        });
                        //Sửa nội dung
                        document.querySelectorAll(".answer-content-to-create-question").forEach(elm => {
                            elm.addEventListener("input", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);
                                const indexAnswerInArray = createQuestionData.Answer.indexOf(createQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                createQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                console.log(createQuestionData);
                            });
                        });

                        //Thêm file đính kèm
                        document.querySelectorAll(".answer-file-to-create-question").forEach(elm => {
                            elm.addEventListener("input", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);
                                const indexAnswerInArray = createQuestionData.Answer.indexOf(createQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                if (elm.files[0] !== undefined && (elm.files[0].type.indexOf("audio") !== -1 || elm.files[0].type.indexOf("image") !== -1 || elm.files[0].type.indexOf("video") !== -1)) {
                                    let fileData = new FormData();
                                    fileData.append(elm.files[0].name, elm.files[0]);
                                    $.ajax({
                                        type: "POST",
                                        url: "/Admin/UploadDoc?Filename=", //Your own back-end uploader
                                        contentType: false,
                                        processData: false,
                                        data: fileData,
                                        async: true,
                                        success: function (response) {
                                            const jsonResponse = JSON.parse(response);
                                            console.log(jsonResponse);
                                            createQuestionData.Answer[indexAnswerInArray]["DocId"] = jsonResponse.DocId;
                                            createQuestionData.Answer[indexAnswerInArray]["Type"] = elm.files[0].type;
                                            console.log(createQuestionData);
                                            updateProgressById("progressFileAnswer_" + AnswerId, 0);

                                            let elem;
                                            const node = elm.parentNode;

                                            if (elm.files[0].type.indexOf("image") !== -1) {
                                                //Picture
                                                elem = document.createElement("img");
                                                elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                elem.setAttribute("preload", "metadata");
                                                elem.setAttribute("height", "auto");
                                                elem.setAttribute("width", "auto");
                                                elem.classList.add("col-12");
                                                elem.classList.add("mb-2");

                                                if (elm.parentNode.childElementCount === 4) {
                                                    node.removeChild(node.lastChild);
                                                    node.removeChild(node.lastChild);
                                                }
                                                node.appendChild(elem);
                                            } else if (elm.files[0].type.indexOf("audio") !== -1) {
                                                //Audio
                                                elem = document.createElement("audio");
                                                elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                elem.setAttribute("controls", "controls");
                                                elem.setAttribute("preload", "metadata");
                                                elem.classList.add("col-12");
                                                elem.classList.add("mb-2");

                                                if (elm.parentNode.childElementCount === 4) {
                                                    node.removeChild(node.lastChild);
                                                    node.removeChild(node.lastChild);
                                                }
                                                node.appendChild(elem);
                                            } else if (elm.files[0].type.indexOf("video") !== -1) {
                                                //Video
                                                elem = document.createElement("video");
                                                elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                elem.setAttribute("controls", "controls");
                                                elem.setAttribute("preload", "metadata");
                                                elem.classList.add("col-12");
                                                elem.classList.add("mb-2");

                                                if (elm.parentNode.childElementCount === 4) {
                                                    node.removeChild(node.lastChild);
                                                    node.removeChild(node.lastChild);
                                                }
                                                node.appendChild(elem);
                                            }
                                            else {
                                                return
                                            }
                                            let removeBtnElm = document.createElement("button");
                                            removeBtnElm.classList.add("btn");
                                            removeBtnElm.classList.add("btn-danger");
                                            removeBtnElm.classList.add("col-12");
                                            removeBtnElm.classList.add("remove-document-from-answer-to-create-question");
                                            removeBtnElm.innerHTML = `<i class="fas fa-minus"></i>`;
                                            removeBtnElm.addEventListener("click", e => {
                                                node.removeChild(node.lastChild);
                                                node.removeChild(node.lastChild);
                                                createQuestionData.Answer[indexAnswerInArray]["DocId"] = undefined;
                                                createQuestionData.Answer[indexAnswerInArray]["Type"] = "text";
                                                node.firstChild.value = "";
                                            })
                                            node.appendChild(removeBtnElm);

                                        },
                                        xhr: function () {
                                            let xhr = new window.XMLHttpRequest();
                                            xhr.upload.addEventListener("progress", function (evt) {
                                                if (evt.lengthComputable) {
                                                    let percentComplete = Math.round((evt.loaded / evt.total) * 100);
                                                    if (percentComplete < 98) {
                                                        updateProgressById("progressFileAnswer_" + AnswerId, percentComplete);
                                                    }
                                                }
                                            }, false);
                                            return xhr;
                                        },
                                        error: () => {
                                            toastr.error("Lỗi tải lên file!");
                                        }
                                    });

                                }
                            });
                        });
                        //Chọn câu đúng
                        document.querySelectorAll(".answer-right-to-create-question").forEach(elm => {
                            elm.addEventListener("change", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);
                                if (e.target.checked) {
                                    let newTrueAnswers = createQuestionData.TrueAnswers.split(",")
                                    newTrueAnswers = newTrueAnswers.filter(ansId => ansId !== AnswerId);
                                    newTrueAnswers.push(AnswerId);
                                    createQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                } else {
                                    let newTrueAnswers = createQuestionData.TrueAnswers.split(",")
                                    newTrueAnswers = newTrueAnswers.filter(ansId => ansId !== AnswerId);
                                    createQuestionData.TrueAnswers = newTrueAnswers.join(",");
                                }
                                console.log(createQuestionData);
                            });
                        });
                    } else if (createQuestionData.Type === "2") {


                        let indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                        if (document.getElementById(`answerToCreateQuestion_${indexAnswerToCreateQuestion}`) !== undefined) {
                            indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                        }
                        const tr = document.createElement("tr");
                        tr.setAttribute("id", `answerToCreateQuestion_${indexAnswerToCreateQuestion}`);
                        tr.classList.add("answer-to-create-question");
                        tr.innerHTML = `<th class="text-center"><i class="fas fa-sort-down fa-2x"></i></th>
<th><input class="answer-content-to-create-question col-12" type="text"></th>
<th><input class="answer-file-to-create-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
<div class="progress d-none mb-4" id="progressFileAnswer_${indexAnswerToCreateQuestion}">
</div></th>
<th>
</th>
`;
                        answerToCreateQuestionTableBody.appendChild(tr);
                        createQuestionData.Answer.push({ AnswerId: indexAnswerToCreateQuestion, Content: "" })
                        //Câu trả lời để nối
                        indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                        if (document.getElementById(`answerToCreateQuestion_${indexAnswerToCreateQuestion}`) !== undefined) {
                            indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                        }
                        const trNext = document.createElement("tr");
                        trNext.setAttribute("id", `answerToCreateQuestion_${indexAnswerToCreateQuestion}`);
                        trNext.classList.add("answer-to-create-question");
                        trNext.innerHTML = `<th class="text-center"><i class="fas fa-sort-up fa-2x"></i></th>
<th><input class="answer-content-to-create-question col-12" type="text"></th>
<th><input class="answer-file-to-create-question mb-4 col-12" type="file" accept="video/*,image/*,audio/*">
<div class="progress d-none mb-4" id="progressFileAnswer_${indexAnswerToCreateQuestion}">
</div></th>
<th>
<button class="btn btn-danger col-12 remove-answer-to-create-question">
<i class="fas fa-minus"></i>
</button>
</th>
`;
                        answerToCreateQuestionTableBody.appendChild(trNext);
                        createQuestionData.Answer.push({ AnswerId: indexAnswerToCreateQuestion, Content: "" })

                        console.log(createQuestionData);
                        //Xóa câu trả lời
                        document.querySelectorAll(".remove-answer-to-create-question").forEach(elm => {
                            elm.addEventListener("click", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);
                                //Cập nhật trả lời
                                let indexAnswer = createQuestionData.Answer.indexOf(createQuestionData.Answer.find(ans => String(ans.AnswerId) === String(AnswerId)));
                                console.log(indexAnswer);
                                createQuestionData.Answer.splice(indexAnswer, 1);
                                createQuestionData.Answer.splice(indexAnswer - 1, 1);


                                const node = elm.parentNode.parentNode.parentNode;
                                const children = node.children;
                                node.removeChild(children[indexAnswer]);
                                node.removeChild(children[indexAnswer - 1]);
                                console.log(createQuestionData);
                            });
                        });
                        //Sửa nội dung
                        document.querySelectorAll(".answer-content-to-create-question").forEach(elm => {
                            elm.addEventListener("input", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);
                                const indexAnswerInArray = createQuestionData.Answer.indexOf(createQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                createQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                console.log(createQuestionData);
                            });
                        });

                        //Thêm file đính kèm
                        document.querySelectorAll(".answer-file-to-create-question").forEach(elm => {
                            elm.addEventListener("input", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);
                                const indexAnswerInArray = createQuestionData.Answer.indexOf(createQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                if (elm.files[0] !== undefined && (elm.files[0].type.indexOf("audio") !== -1 || elm.files[0].type.indexOf("image") !== -1 || elm.files[0].type.indexOf("video") !== -1)) {
                                    let fileData = new FormData();
                                    fileData.append(elm.files[0].name, elm.files[0]);
                                    $.ajax({
                                        type: "POST",
                                        url: "/Admin/UploadDoc?Filename=", //Your own back-end uploader
                                        contentType: false,
                                        processData: false,
                                        data: fileData,
                                        async: true,
                                        success: function (response) {
                                            const jsonResponse = JSON.parse(response);
                                            console.log(jsonResponse);
                                            createQuestionData.Answer[indexAnswerInArray]["DocId"] = jsonResponse.DocId;
                                            createQuestionData.Answer[indexAnswerInArray]["Type"] = elm.files[0].type;
                                            console.log(createQuestionData);
                                            updateProgressById("progressFileAnswer_" + AnswerId, 0);

                                            let elem;
                                            const node = elm.parentNode;

                                            if (elm.files[0].type.indexOf("image") !== -1) {
                                                //Picture
                                                elem = document.createElement("img");
                                                elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                elem.setAttribute("preload", "metadata");
                                                elem.setAttribute("height", "auto");
                                                elem.setAttribute("width", "auto");
                                                elem.classList.add("col-12");
                                                elem.classList.add("mb-2");
                                                if (elm.parentNode.childElementCount === 4) {
                                                    node.removeChild(node.lastChild);
                                                    node.removeChild(node.lastChild);
                                                }
                                                node.appendChild(elem);
                                            } else if (elm.files[0].type.indexOf("audio") !== -1) {
                                                //Audio
                                                elem = document.createElement("audio");
                                                elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                elem.setAttribute("controls", "controls");
                                                elem.setAttribute("preload", "metadata");
                                                elem.classList.add("col-12");
                                                elem.classList.add("mb-2");
                                                if (elm.parentNode.childElementCount === 4) {
                                                    node.removeChild(node.lastChild);
                                                    node.removeChild(node.lastChild);
                                                }
                                                node.appendChild(elem);
                                            } else if (elm.files[0].type.indexOf("video") !== -1) {
                                                //Video
                                                elem = document.createElement("video");
                                                elem.setAttribute("src", "/Admin/StreamFile/" + jsonResponse.DocId);
                                                elem.setAttribute("controls", "controls");
                                                elem.setAttribute("preload", "metadata");
                                                elem.classList.add("col-12");
                                                elem.classList.add("mb-2");
                                                if (elm.parentNode.childElementCount === 4) {
                                                    node.removeChild(node.lastChild);
                                                    node.removeChild(node.lastChild);
                                                }
                                                node.appendChild(elem);
                                            }
                                            else {
                                                return
                                            }
                                            let removeBtnElm = document.createElement("button");
                                            removeBtnElm.classList.add("btn");
                                            removeBtnElm.classList.add("btn-danger");
                                            removeBtnElm.classList.add("col-12");
                                            removeBtnElm.classList.add("remove-document-from-answer-to-create-question");
                                            removeBtnElm.innerHTML = `<i class="fas fa-minus"></i>`;
                                            removeBtnElm.addEventListener("click", e => {
                                                node.removeChild(node.lastChild);
                                                node.removeChild(node.lastChild);
                                                createQuestionData.Answer[indexAnswerInArray]["DocId"] = undefined;
                                                createQuestionData.Answer[indexAnswerInArray]["Type"] = "text";
                                                node.firstChild.value = "";
                                            })
                                            node.appendChild(removeBtnElm);

                                        },
                                        xhr: function () {
                                            let xhr = new window.XMLHttpRequest();
                                            xhr.upload.addEventListener("progress", function (evt) {
                                                if (evt.lengthComputable) {
                                                    let percentComplete = Math.round((evt.loaded / evt.total) * 100);
                                                    if (percentComplete < 98) {
                                                        updateProgressById("progressFileAnswer_" + AnswerId, percentComplete);
                                                    }
                                                }
                                            }, false);
                                            return xhr;
                                        },
                                        error: () => {
                                            toastr.error("Lỗi tải lên file!");
                                        }
                                    });

                                }
                            });
                        });

                    } else if (createQuestionData.Type === "3") {

                        let indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                        if (document.getElementById(`answerToCreateQuestion_${indexAnswerToCreateQuestion}`) !== undefined) {
                            indexAnswerToCreateQuestion = Math.random().toString(36).slice(2);
                        }
                        const tr = document.createElement("tr");
                        tr.setAttribute("id", `answerToCreateQuestion_${indexAnswerToCreateQuestion}`);
                        tr.classList.add("answer-to-create-question");
                        tr.innerHTML = `<th class="text-center">[${indexAnswerToCreateQuestion}]</th>
<th><input class="answer-content-to-create-question col-12" type="text"></th>
<th></th>
<th>
<button class="btn btn-danger col-12 remove-answer-to-create-question">
<i class="fas fa-minus"></i>
</button>
</th>
`;
                        answerToCreateQuestionTableBody.appendChild(tr);
                        createQuestionData.Answer.push({ AnswerId: indexAnswerToCreateQuestion, Content: "" })
                        //Thêm đánh dấu vị trí của từ cần thêm
                        $('#summernoteCreateQuestionTextEdit').summernote('insertText', `[${indexAnswerToCreateQuestion}]`);
                        console.log(createQuestionData);
                        //Xóa câu trả lời
                        document.querySelectorAll(".remove-answer-to-create-question").forEach(elm => {
                            elm.addEventListener("click", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);

                                //Xóa dữ liệu câu trả lời
                                let indexAnswer = createQuestionData.Answer.indexOf(createQuestionData.Answer.find(ans => String(ans.AnswerId) === String(AnswerId)));
                                console.log(indexAnswer);
                                createQuestionData.Answer.splice(indexAnswer, 1);
                                //Xóa HTML
                                const node = elm.parentNode.parentNode.parentNode;
                                const children = node.children;
                                node.removeChild(children[indexAnswer]);
                                //Xóa trong texteditor
                                const newContent = $('#summernoteCreateQuestionTextEdit').summernote('code').replace(`[${AnswerId}]`, "")
                                $('#summernoteCreateQuestionTextEdit').summernote('code', newContent);
                                console.log(createQuestionData);
                            });
                        });
                        //Sửa nội dung
                        document.querySelectorAll(".answer-content-to-create-question").forEach(elm => {
                            elm.addEventListener("input", (e) => {
                                const AnswerId = elm.parentNode.parentNode.id.split("_")[1];
                                console.log(AnswerId);
                                const indexAnswerInArray = createQuestionData.Answer.indexOf(createQuestionData.Answer.filter(ans => ans.AnswerId === AnswerId)[0]);
                                createQuestionData.Answer[indexAnswerInArray]["Content"] = e.target.value;
                                console.log(createQuestionData);
                            });
                        });
                    } else if (createQuestionData.Type === "4") {

                    } else if (createQuestionData.Type === "5") {

                    } else if (createQuestionData.Type === "6") {

                    }
                };
            })
        })
        //Đóng giao diện chọn loại câu hỏi
        const closeSelectTypeToCreateQuestionContainerBtn = document.getElementById("closeSelectTypeToCreateQuestionContainerBtn");
        closeSelectTypeToCreateQuestionContainerBtn.addEventListener("click", e => {
            e.preventDefault();
            const selectTypeToCreateQuestionContainer = document.getElementById("selectTypeToCreateQuestionContainer");
            selectTypeToCreateQuestionContainer.classList.add("d-none");
            openCreateQuestionContainerBtn.classList.remove("d-none");
            createQuestionData = { Answer: [], DocIdsContent: "", TrueAnswers: "", Type: "" };
        })
        //Đóng giao diện thêm câu hỏi mới
        const closeCreateQuestionContainerBtn = document.getElementById("closeCreateQuestionContainerBtn");
        closeCreateQuestionContainerBtn.addEventListener("click", (e) => {
            e.preventDefault();
            openCreateQuestionContainerBtn.classList.remove("d-none");
            document.getElementById("createQuestionContainer").classList.add("d-none");
            const answerToCreateQuestionTableBody = document.getElementById("answerToCreateQuestionTableBody");
            answerToCreateQuestionTableBody.innerHTML = "";
            createQuestionData = { Answer: [], DocIdsContent: "", TrueAnswers: "", Type: "" };
            $('#summernoteCreateQuestionTextEdit').summernote('reset');
        });
        //Đóng giao diện cập nhật câu hỏi
        const closeUpdateQuestionContainerBtn = document.getElementById("closeUpdateQuestionContainerBtn");
        closeUpdateQuestionContainerBtn.addEventListener("click", (e) => {
            e.preventDefault();
            const answerToUpdateQuestionTableBody = document.getElementById("answerToUpdateQuestionTableBody");
            answerToUpdateQuestionTableBody.innerHTML = "";
            const key = document.getElementById("searchQuestionInput").value;
            const numberRecord = document.querySelectorAll(".question-record").length;
            getQuestion(key, numberRecord);
        });
        //Hiệu ứng cuộn và load câu hỏi
        $(document).ready(function () {
            $(window).scroll(function () {
                const position = $(window).scrollTop();
                const bottom = $(document).height() - $(window).height();

                if (position == bottom) {
                    const key = document.getElementById("searchQuestionInput").value;
                    const numberRecord = document.querySelectorAll(".question-record").length;
                    const node = document.getElementById("quesTableBody").parentNode.parentNode.parentNode;
                    if (numberRecord % 15 === 0 && numberRecord !== 0 && node.children.item(3) === null) {
                        getQuestion(key, numberRecord + 15);
                    }
                }
            });

        });
    </script>


}
